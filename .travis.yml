dist: bionic

sudo: required

addons:
  chrome: stable
  apt:
    packages:
      - expect

language: scala

scala:
  - "2.12.1"

python:
  - "3.7"

jdk:
  - openjdk10

services:
  - docker
  # - redis-server

env:
  global:
  - secure: Sj0D8wR3Vx0J0h+LBUIh9t1PWjLJ2NEiKILf3JO5nuGdlU7dPhbFomR4w08q85O4d60km38ml7zpapC4noDQnbAFQHC6XeOe5CWPYFXCxkw7ueBoxhy/vkfSzypXp0UTNUX3S7+RcGJcTxLaZcUC9u+UaoWB0LMkmOcIlrKIDuzm3HcefMsml8gYX1xhS2TQJ8P7ZerzBmm0kERYLUabhxTnj5WAvue0d1xbUtzCzT1LpignOfsUZ9kHTagQEA15JsU0iNrMCvlDcxRWj8OzLhHRoHui4bJPQQfKEA8oMnTkPyzBRLmqafqHvmGcNQp9iGhuU04gb+FkF4gubBkLrxEvgTL/D5vIin3BHQvnZna9zSnUguZS+jw4sfEYcjZgYRzgMRPma/630ZM08FSZZ/qjSTCut4Cjua5aw2Vf9pYhf+Aad5rR0T2JmVYKp6Ik92aLhPOF9U40MacKRPPT54RIjCYcakZlmU4vl+kK37l3sYjvD57LeSs3PlqvkpSxwJzaQDhZFOZ+c7ICo+zU7DcQnWkN7k+ErKBOE7r0mIqvYuBYhdteBVKfo8a4rpDzYJDXaWzBdjc8ZKiEFQvFHngnZjR2UtKc0CAc6Y7ieCWIvBZYdMoHhKsBwFDaO1iuWwDLW3cswXaPEqENonlVAnXePu7KkQeB2acwDzPkhlI=
  - secure: iM3Wjt3f5yUaU16yKstwBEEFA8WKx8qcTVnOwF+o9+sooD1SZ39nYJDPgpHHNwFZ1aSkre5ATPEw+dfslr7SnnwYQeYHjYldcqudB+7pq4dmY5U3rCTsjZCH1XmLnnLO45CZRy05pIAUSxWpIiX5khWoHZd704UlDncqIU/6paWWNkywPb2P4UBZ5Xeai1NTS1URHRz0A4aD+dqwKS6P+baq4CyKLC/AqjsTDI+TV4C26FXXTgS0Ly9VfBVZ55D+SdVHgCZXJaHerAixjSX6zvenfkd/87GR6NEAgJ9QofF2nDEXBZZm4jPv5d285Cc4iUvRo1HLbI1VlALya3qUA9Prbno8QQaChNdjRS7mSplkCxZZKzBItpjvI009NPl20zX6GROb/JCjWHRZ4R358cebFKKqE4W1GBArS0piVbdqZyWA/t5KANouQIdrh+lepAf/Xq5JRcDP9r+Rk2hHLk2Rmj97gv001eRf9GjSEC1Qo1kwu1FabZok1UIemJHpY7yWO4d3ZKSOCyQ0WdW6rLMFGkouoByrFVfNPBVxLqDJ3YVL/4x5jc0Q9+G5jm6omqNwQSsn60nUizZJp1fuLGQRUNj8EDvRhxLgVkOJqFf4P/4qRas47k1wkWBk2iBlpNp2eQTY42IZovPIyT+NCfbdg0yyZRyHThpfc+KfTeg=
  - WEBAPI_REPO=dhlabbasel/webapi
  - SALSAH1_REPO=dhlabbasel/salsah1
  - SALSAH2_REPO=dhlabbasel/salsah2
  - SIPI_REPO=dhlabbasel/sipi
  - DOCKERHOST=$(ip route get 8.8.8.8 | awk '{print $NF; exit}')
  - CHROME_BIN=google-chrome-stable
  - GDB_HEAP_SIZE="2G"
  - TAG=${TRAVIS_BRANCH//\//-}
  - GRAPHDB_VERSION="8.5.0-se"

before_cache:
  - sudo chown -R travis:travis $HOME/.ivy2

cache:
  directories:
    - "$HOME/.ivy2"

before_install:
  - openssl aes-256-cbc -K $encrypted_ec8f5e0fa991_key -iv $encrypted_ec8f5e0fa991_iv -in travis/secrets.tar.enc -out $TRAVIS_BUILD_DIR/travis/secrets.tar -d
  - tar -C travis -xvf travis/secrets.tar

stages:
  - compile and stage
  - test
  - name: publish # generally, only publish if we are on 'develop' or tagged
    if: branch = develop OR tag IS present

jobs:
  include:
    # test sbt compile and stage
    - stage: compile and stage
      script:
        - rm -rf $HOME/.sbt
        - rm -rf $HOME/.ivy2
        - cd $TRAVIS_BUILD_DIR && sbt clean stage
        # only uncomment if docker image is needed for this branch. remove before merging into develop
        # - docker login -u $DOCKER_USER -p $DOCKER_PASS
        # - sbt webapi/docker:publish
        # - sbt salsah1/docker:publish
        # - sbt knora-sipi/docker:publish
        # - sbt knora-graphdb-se/docker:publish
        # - sbt knora-graphdb-free/docker:publish
        # - sbt upgrade/docker:publish
        # - sbt knora-assets/docker:publish
    # unit tests
    - stage: test
      script:
        # set graphdb license
        - export KNORA_GDB_LICENSE=$TRAVIS_BUILD_DIR/travis/graphdb.license
        # start the integration tests
        - make unit-tests-with-coverage
        # print out .env file used by the stack
        - make print-env-file
    # e2e tests
    - stage: test
      script:
        # set graphdb license
        - export KNORA_GDB_LICENSE=$TRAVIS_BUILD_DIR/travis/graphdb.license
        # start the integration tests
        - make e2e-tests-with-coverage
        # print out .env file used by the stack
        - make print-env-file
    # integration tests
    - stage: test
      script:
        # set graphdb license
        - export KNORA_GDB_LICENSE=$TRAVIS_BUILD_DIR/travis/graphdb.license
        # start the integration tests
        - make it-tests-with-coverage
        # print out Sipi logs
        - make stack-logs-sipi-no-follow
        # print out .env file used by the stack
        - make print-env-file
    # upgrade tests
    - stage: test
      script:
        # build all docker images
        - make build-all-images
        # prepare needed graphdb-se files
        - mkdir -p $TRAVIS_BUILD_DIR/graphdb
        - cp $TRAVIS_BUILD_DIR/travis/graphdb.license $TRAVIS_BUILD_DIR/graphdb/graphdb.license
        - cp $TRAVIS_BUILD_DIR/webapi/scripts/KnoraRules.pie $TRAVIS_BUILD_DIR/graphdb
        # start and initialize graphdb-se
        - docker network create knora-net
        - docker run --rm -d --name=db --network=knora-net -p 127.0.0.1:7200:7200 -v $TRAVIS_BUILD_DIR/graphdb:/graphdb -e GDB_HEAP_SIZE=$GDB_HEAP_SIZE daschswiss/knora-graphdb-se -Dgraphdb.license.file=/graphdb/graphdb.license
        - sleep 5
        - make init-db-test-minimal
        # load v7.0.0 data and run auto-upgrade (sbt use case)
        - cd $TRAVIS_BUILD_DIR/upgrade/graphdb-se
        - unzip $TRAVIS_BUILD_DIR/test-data/v7.0.0/v7.0.0-knora-test.trig.zip
        - ./empty-repository.sh -r knora-test -u gaga -p gaga -h localhost:7200
        - ./upload-repository.sh -r knora-test -u gaga -p gaga -h localhost:7200 v7.0.0-knora-test.trig
        - ./auto-upgrade.sh -r knora-test -u gaga -p gaga -h localhost:7200 -t /tmp/upgrade.dir
        # load v7.0.0 data and run auto-upgrade (docker use case)
        - ./empty-repository.sh -r knora-test -u gaga -p gaga -h localhost:7200
        - ./upload-repository.sh -r knora-test -u gaga -p gaga -h localhost:7200 v7.0.0-knora-test.trig
        - docker run -it --rm --network=knora-net -v /tmp:/tmp -e KNORA_UPGRADE_DOCKER=true daschswiss/knora-upgrade -r knora-test -u gaga -p gaga -h db:7200 -t /tmp/upgrade.dir
    # testing docs generation
    - stage: test
      script:
        - mkdir -p $TRAVIS_BUILD_DIR/docs/target
        - chmod 777 $TRAVIS_BUILD_DIR/docs/target
        - make docs-build
    # Salsah browser tests
    #- stage: test
    #  script:
    #    # prepare needed graphdb-se files
    #    - mkdir -p $TRAVIS_BUILD_DIR/data/conf
    #    - cp $TRAVIS_BUILD_DIR/travis/graphdb.license $TRAVIS_BUILD_DIR/data/conf/graphdb.license
    #    - mkdir -p $TRAVIS_BUILD_DIR/graphdb
    #    - cp $TRAVIS_BUILD_DIR/webapi/scripts/KnoraRules.pie $TRAVIS_BUILD_DIR/graphdb
    #    # start and initialize graphdb-se
    #    - docker run -d -p 127.0.0.1:7200:7200 -v $TRAVIS_BUILD_DIR/data:/opt/graphdb/home -v $TRAVIS_BUILD_DIR/graphdb:/graphdb -e GDB_HEAP_SIZE=$GDB_HEAP_SIZE ontotext/graphdb:$GRAPHDB_VERSION
    #    - sleep 15
    #    - cd $TRAVIS_BUILD_DIR/webapi/scripts && ./graphdb-se-docker-init-knora-test.sh
    #    # start the sipi container (with test config)
    #    - docker run -d --add-host webapihost:$DOCKERHOST -v /tmp:/tmp -v $HOME:$HOME -p 1024:1024 $SIPI_REPO:develop /sipi/local/bin/sipi --config=/sipi/config/sipi.knora-test-docker-config.lua
    #    # start the webapi and salsah1 server
    #    - cd $TRAVIS_BUILD_DIR/webapi/ && sbt "run allowReloadOverHTTP" &
    #    - cd $TRAVIS_BUILD_DIR/salsah1/ && sbt run &
    #    # wait for the webapi server to start before we proceed with running the salsah tests
    #    - until netstat -an 2>/dev/null | grep '3333.*LISTEN'; do true; done
    #    # unzip chromedriver
    #    - cd $TRAVIS_BUILD_DIR/salsah1/lib/chromedriver/ && unzip chromedriver_linux64.zip
    #    # start built-in salsah1 browser tests
    #    - cd $TRAVIS_BUILD_DIR/salsah1/ && sbt headless:test
    - stage: publish
      script:
        # login into docker hub, build image, and push but only when on the "develop" branch or tagged
        # when on 'develop' then $TRAVIS_BRANCH = develop
        # when on 'tag' then $TRAVIS_BRANCH = tag, e.g., v1.2.0
        - docker login -u $DOCKER_USER -p $DOCKER_PASS
        # knora-api
        - sbt webapi/docker:publish
        # knora-salsah1
        - sbt salsah1/docker:publish
        # knora-sipi
        - sbt knora-sipi/docker:publish
        # knora-graphdb-se
        - sbt knora-graphdb-se/docker:publish
        # knora-graphdb-free
        - sbt knora-graphdb-free/docker:publish
        # knora-upgrade
        - sbt upgrade/docker:publish
        # knora-assets
        - sbt knora-assets/docker:publish
        # publish images to daschswiss dockerhub organization
        - make publish-all-images

notifications:
  slack:
    secure: gaazomUbAB4q7bH2XOiZXqHvU2gd/X/jIRLAJW9vjcRbY6o48eiEdNXF2umraHG0q+5UUEJ5dfvxiPtC4PiUq8uD6J+R0fEWrWznYoIeEWEXjKxRxWplrWJ9Ke+PJb3wCV6cXBGMfxDpvYQbVjsy7n0aQmjNs4Drz+llqL5SilTdswTylwvUdufad0QaovXklL+p0w9vRHRKzQkYKa9phL10VcJa8TPI74tuFcTHnK6TcMNW6p0vzAaF6JVgzoRPzUgXnEPCw4pI8zqOF1ghPpQByNXKiYofPWt1yTFgb60LQarDEiHXunXAA/sf2gx616pWLVjDFGziXVzhiGUDUjM5I1p7hPyA2rTB63AAZustFcGeD+jbHNHIFhcvvCHVHjJfp8M7LrUR+MBqz5mJNi/9KgxyZ8I9Df28TxmKxGFaGW8t4PZdA75/49Hos0TqtIp5m+eo8mTksUJogEJJokRZUKraMBhC0cNCry0kp+EQ06F4usLoDyZTUar4OSuNSiymf+zwz6jZo8dF/cluRYellwewE9NJiNWGN4DiBhk2vGJ7OtWMDPkl1tqkG8npoqbT4s38esjxfa/XcworGfeqE+9mzugVzkIKIX2lB6QxZp0AKQVOiy7JwwdtcjVMLvceiNPEWfe8fhLMX02oqYz2uoibRmHMxKPa5CpmUIg=
