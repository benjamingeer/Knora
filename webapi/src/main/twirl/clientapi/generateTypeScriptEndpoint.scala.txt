@*
 * Copyright Â© 2015-2019 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi._
@import org.knora.webapi.util._
@import org.knora.webapi.util.clientapi._
@import org.knora.webapi.util.clientapi.TypeScriptBackEnd.ClassInfo

@(name: String,
  description: String,
  importedClasses: Set[ClassInfo],
  functions: Seq[ClientFunction])

import { Observable } from "rxjs";
import { catchError, map } from "rxjs/operators";

import { ApiResponseData } from "../../../models/api-response-data";
import { ApiResponseError } from "../../../models/api-response-error";
import { Endpoint } from "../../endpoint";

@for(classInfo <- importedClasses) {
import { @classInfo.className } from "@classInfo.importPathInEndpoint";
}

@makeObjectType(objectType: ClientObjectType) = @{

}

/**
 * @description
 */
export class @name extends Endpoint {

    @for(function <- functions) {
    /**
     * @function.description
     @for(param <- function.params) {
     * @@param @param.name @param.description
     }
     */
    @{function.name}(@for((param, index) <- function.params.zipWithIndex) {
        @if(index > 0) {,
        }
        @param.name: @makeObjectType(param)
    }

    property: "iri" | "email" | "username",
            value: string): Observable<ApiResponseData<UserResponse> | ApiResponseError> {

        return this.httpGet("/" + property + "/" + value).pipe(
            map(ajaxResponse => ApiResponseData.fromAjaxResponse(ajaxResponse, UserResponse, this.jsonConvert)),
            catchError(error => this.handleError(error))
        );

    }

    }


}