@*
 * Copyright Â© 2015-2019 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi._
@import org.knora.webapi.util._
@import org.knora.webapi.util.clientapi._
@import org.knora.webapi.util.clientapi.TypeScriptBackEnd.ImportInfo
@import org.knora.webapi.messages.v2.responder.ontologymessages.Cardinality._

@(classDef: ClientClassDefinition,
  subClassOf: Option[ClassRef],
  importedClasses: Seq[ImportInfo])import { JsonObject, JsonProperty } from "json2typescript";

@for(classInfo <- importedClasses) {import { @classInfo.className } from "@classInfo.importPath";
}@classDef.classDescription match {
    case Some(classDescStr) => {
/**
 * @classDescStr
 */}

    case None => {}
}
@@JsonObject("@{classDef.className}")
export class @{classDef.className}@{
    subClassOf match {
       case Some(subClassDef) => " extends " + subClassDef.className
       case None => ""
    }
} {
@for(property <- classDef.properties) {
@defining(makeTypeScriptType(property.objectType)) { typeScriptType => @property.propertyDescription match {
    case Some(propDescStr) => {   /**
     * @propDescStr
     */}

    case None => {}
    }
    @@JsonProperty("@{property.propertyName}", @wrapInArrayForCardinality(typeScriptType.capitalize, property.cardinality)@if(property.cardinality == MayHaveOne) {, true})
    @{property.propertyName}@handleOption(property.cardinality): @addForCardinality(property.objectType, typeScriptType, property.cardinality) = @makeDefaultValue(property.objectType, property.cardinality);
}}
}@makeTypeScriptType(objectType: ClientObjectType) = @{
    objectType match {
        case StringDatatype => "string"
        case BooleanDatatype => "boolean"
        case IntegerDatatype => "number"
        case DecimalDatatype => "number"
        case UriDatatype => "string"
        case DateTimeStampDatatype => "string"
        case classRef: ClassRef => classRef.className
        case other => throw ClientApiGenerationException(s"Type $other not yet supported")
    }
}@makeDefaultValue(objectType: ClientObjectType, cardinality: Cardinality) = @{
    cardinality match {
        case MayHaveMany | MustHaveSome => "[]"

        case MayHaveOne => "undefined"

        case MustHaveOne =>
            objectType match {
                case StringDatatype => "\"\""
                case BooleanDatatype => "false"
                case IntegerDatatype => "0"
                case DecimalDatatype => "0"
                case UriDatatype => "\"\""
                case DateTimeStampDatatype => "\"\""
                case classRef: ClassRef => s"new ${classRef.className}()"
                case other => throw ClientApiGenerationException(s"Type $other not supported in this template")
            }
    }
}@wrapInArrayForCardinality(typeScriptType: String, cardinality: Cardinality) = @{
    if (cardinality == MayHaveMany || cardinality == MustHaveSome) {
        s"[$typeScriptType]"
    } else {
        typeScriptType
    }
}@handleOption(cardinality: Cardinality) = @{
    if (cardinality == MayHaveOne) {
        "?"
    } else {
        ""
    }
}@addForCardinality(objectType: ClientObjectType, typeScriptType: String, cardinality: Cardinality) = @{
    if (cardinality == MayHaveMany || cardinality == MustHaveSome) {
        s"$typeScriptType[]"
    } else {
        typeScriptType
    }
}