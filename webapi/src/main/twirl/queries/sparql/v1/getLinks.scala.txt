@*
 * Copyright © 2015 Lukas Rosenthaler, Benjamin Geer, Ivan Subotic,
 * Tobias Schweizer, André Kilchenmann, and André Fatton.
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi._

@**
 * Gets the outbound or inbound links from/to a resource. This query is used recursively to get a graph of
 * resources reachable from a given resource.
 *
 * If the triplestore type is GraphDB, we assume that inference is enabled, and we use it to optimise the generated
 * SPARQL. Specifically, we use inference to find subproperties of knora-base:hasLinkTo and knora-base:isPartOf.
 * Without inference, we have to do this using SPARQL property path syntax (rdfs:subPropertyOf*). Using inference
 * requires us to use GraphDB's GRAPH <http://www.ontotext.com/explicit> whenever we need to get explicit
 * (non-inferred) statements.
 *
 * @param triplestore the name of the triplestore being used.
 * @param startNodeIri the IRI of the resource to use as the starting point of the query.
 * @param outbound true to get outbound links, false to get inbound links.
 *@
@(triplestore: String,
  startNodeIri: IRI,
  outbound: Boolean)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

SELECT ?startNodeClass ?startNodeLabel ?startNodeOwner ?startNodeProject ?startNodePermissions
       ?otherNode ?otherNodeClass ?otherNodeLabel ?otherNodeOwner ?otherNodeProject ?otherNodePermissions
       ?linkValue ?linkProp ?linkValueOwner ?linkValueProject ?linkValuePermissions
WHERE {
    BIND(IRI("@startNodeIri") AS ?startNode) .

    @if(triplestore.startsWith("graphdb")) {
        GRAPH <http://www.ontotext.com/explicit> {
            ?startNode a ?startNodeClass .
        }
    } else {
        ?startNode a ?startNodeClass .
    }

    ?startNode rdfs:label ?startNodeLabel ;
        knora-base:attachedToUser ?startNodeOwner ;
        knora-base:attachedToProject ?startNodeProject ;
        knora-base:isDeleted false .

    OPTIONAL {
        ?startNode knora-base:hasPermissions ?startNodePermissions .
    }

    @if(triplestore == "graphdb") {
        @if(outbound) {
            ?startNode knora-base:hasLinkTo ?otherNode .

            FILTER NOT EXISTS {
                ?startNode knora-base:isPartOf ?otherNode .
            }

            GRAPH <http://www.ontotext.com/explicit> {
                ?startNode ?linkProp ?otherNode .
            }
        } else {
            ?otherNode knora-base:hasLinkTo ?startNode .

            FILTER NOT EXISTS {
                ?otherNode knora-base:isPartOf ?startNode .
            }

            GRAPH <http://www.ontotext.com/explicit> {
                ?otherNode ?linkProp ?startNode .
            }
        }
    } else {
        ?linkProp rdfs:subPropertyOf* knora-base:hasLinkTo .

        @if(outbound) {
            ?startNode ?linkProp ?otherNode .

            FILTER NOT EXISTS {
                ?isPartOfProp rdfs:subPropertyOf* knora-base:isPartOf .
                ?startNode ?isPartOfProp ?otherNode .
            }
        } else {
            ?otherNode ?linkProp ?startNode .

            FILTER NOT EXISTS {
                ?isPartOfProp rdfs:subPropertyOf* knora-base:isPartOf .
                ?otherNode ?isPartOfProp ?startNode .
            }
        }
    }

    @if(outbound) {
        ?otherNode knora-base:isDeleted false .

        ?linkValue a knora-base:LinkValue ;
            rdf:subject ?startNode ;
            rdf:predicate ?linkProp ;
            rdf:object ?otherNode .
    } else {
        ?otherNode knora-base:isDeleted false .

        ?linkValue a knora-base:LinkValue ;
            rdf:subject ?otherNode ;
            rdf:predicate ?linkProp ;
            rdf:object ?startNode .
    }

    @if(triplestore.startsWith("graphdb")) {
        GRAPH <http://www.ontotext.com/explicit> {
            ?otherNode a ?otherNodeClass .
        }
    } else {
        ?otherNode a ?otherNodeClass .
    }

    ?otherNode rdfs:label ?otherNodeLabel ;
        knora-base:attachedToUser ?otherNodeOwner ;
        knora-base:attachedToProject ?otherNodeProject .

    OPTIONAL {
        ?otherNode knora-base:hasPermissions ?otherNodePermissions .
    }

    ?linkValue knora-base:attachedToUser ?linkValueOwner ;
        knora-base:hasPermissions ?linkValuePermissions .

    OPTIONAL {
        ?linkValue knora-base:attachedToProject ?linkValueProject .
    }
}
LIMIT 50