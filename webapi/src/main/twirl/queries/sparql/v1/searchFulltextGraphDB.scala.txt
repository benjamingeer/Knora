@*
 * Copyright Â© 2021 - 2022 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.exceptions.SparqlGenerationException
@import org.knora.webapi.util.ApacheLuceneSupport.LuceneQueryString

@*
 * Performs a simple full-text search using GraphDB. The number of rows returned per matching resource is equal to the
 * number of values that matched in the resource, plus one if the resource's label matched.
 *
 * This template is used only by searchFulltext.scala.txt.
 *
 * Since the triplestore type is GraphDB, we assume that inference is enabled, and we use it to optimise the generated
 * SPARQL. Specifically, we use inference to return search results matching subclasses of the resource class
 * specified by the user. This requires us to use GraphDB's GRAPH <http://www.ontotext.com/explicit> whenever
 * we need to get explicit (non-inferred) statements.
 *
 * @param searchTerms search terms to be combined with AND in Lucene full-text search syntax.
 * @param preferredLanguage the language code of the user's preferred language.
 * @param fallbackLanguage the language code of the application's default language.
 * @param projectIriOption if filtering by project is desired, the IRI of the project to search.
 * @param restypeIriOption if given, searches only for resources of this class and its subclasses.
 *@
@(searchTerms: LuceneQueryString,
  preferredLanguage: String,
  fallbackLanguage: String,
  projectIriOption: Option[IRI],
  restypeIriOption: Option[IRI])

prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix knora-base: <http://www.knora.org/ontology/knora-base#>

SELECT DISTINCT
    ?resource
    ?resourceLabel @* The label of a matching resource. This is called "firstprop" in the v1 API. *@
    ?resourceClass
    ?previewPath
    ?previewDimX
    ?previewDimY
    ?resourceCreator
    ?resourceProject
    ?resourcePermissions
    ?resourceProperty
    ?valueObject
    ?valueObjectType
    ?valueCreator
    ?valuePermissions
    ?literal
WHERE {
    BIND(STR("@preferredLanguage") AS ?preferredLanguage)
    BIND(STR("@fallbackLanguage") AS ?fallbackLanguage)

    ?matchingSubject ?matchingProperty ?literal .
    ?literal <http://www.ontotext.com/owlim/lucene#fullTextSearchIndex> '@searchTerms.getQueryString' .
    ?matchingSubject knora-base:isDeleted false .

    # ?matchingSubject could be a resource (whose rdfs:label matched) or a value object

    OPTIONAL {
        # If this clause is executed, it is a value object. We set ?containingResource to the resource that contains the matching value object.

        ?matchingSubject a knora-base:Value .
        ?containingResource knora-base:hasValue ?matchingSubject .

        GRAPH <http://www.ontotext.com/explicit> {
            ?matchingSubject a ?valueObjectType .
            ?containingResource ?resourceProperty ?matchingSubject .
        }

        FILTER(?valueObjectType != knora-base:LinkValue)
        ?containingResource knora-base:isDeleted false .

        BIND(?matchingSubject AS ?valueObject)

        ?valueObject knora-base:attachedToUser ?valueCreator ;
            knora-base:hasPermissions ?valuePermissions .
    }

    # If the previous OPTIONAL clause executed, ?matchingSubject is a value, and ?containingResource will be set. Otherwise, ?matchingSubject is a resource.
    BIND(COALESCE(?containingResource, ?matchingSubject) AS ?resource)

    @projectIriOption match {
        case Some(projectIri) => {

            # filter by projectIri
            ?resource knora-base:attachedToProject <@projectIri> .

        }

        case None => {}
    }

    GRAPH <http://www.ontotext.com/explicit> {
        ?resource a ?resourceClass .
    }

    @restypeIriOption match {

        case Some(restypeIri) => {

            # Filter by resource class.

            ?resource a <@restypeIri> .

        }

        case None => {

            @* Ensure that each matching resource is a knora-base:Resource. *@

            ?resource a knora-base:Resource .
        }
    }


    ?resource rdfs:label ?resourceLabel .

    OPTIONAL {
       ?resource knora-base:hasStillImageFileValue ?fileValue .
       ?fileValue a knora-base:StillImageFileValue .
       ?fileValue knora-base:isPreview true .
       ?fileValue knora-base:internalFilename ?previewPath .

        OPTIONAL {
            ?fileValue knora-base:dimX ?previewDimX .
            ?fileValue knora-base:dimY ?previewDimY .
        }
    }

    ?resource knora-base:attachedToUser ?resourceCreator ;
        knora-base:attachedToProject ?resourceProject ;
        knora-base:hasPermissions ?resourcePermissions .
}
LIMIT 500
