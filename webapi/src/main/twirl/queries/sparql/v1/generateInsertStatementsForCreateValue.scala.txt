@*
 * Copyright © 2015 Lukas Rosenthaler, Benjamin Geer, Ivan Subotic,
 * Tobias Schweizer, André Kilchenmann, and André Fatton.
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi._
@import org.knora.webapi.twirl.SparqlTemplateLinkUpdate
@import org.knora.webapi.twirl.StandoffTagInternalReferenceAttributeV1
@import org.knora.webapi.messages.v1.responder.valuemessages._

@**
 * Generates statements to be added to the INSERT clause of a SPARQL update when creating a new value of a resource
 * property (as opposed to a new version of an existing value). This template is used in two contexts: when creating a
 * single value in an existing resource, and when creating a new resource with its initial values.
 *
 * @param valueIndex the index of the value in the sequence of values that are being created in the transaction. This
 *                   index will be used to make SPARQL variable names specific to the value being created. If
 *                   a single value is being created in an existing resource, `valueIndex` will be 0.
 * @param value the value to insert.
 * @param linkUpdates a list of [[LinkUpdate]] objects describing links and LinkValues that need to be
 *        updated for resource references in Standoff text values. This list will be empty if the links and LinkValues
 *        are being created separately.
 * @param maybeComment an optional comment on the value.
 * @param valueCreator the IRI of the user who created the value.
 * @param valuePermissions the permissions that should be attached to the value.
 *
 * The expected SPARQL variables are those generated by generateWhereStatementsForCreateValue.scala.txt, plus
 * `?resource` and `?currentTime`.
 *@
@(valueIndex: Int,
  propertyIri: IRI,
  value: UpdateValueV1,
  newValueIri: IRI,
  linkUpdates: Seq[SparqlTemplateLinkUpdate],
  maybeComment: Option[String],
  valueCreator: IRI,
  valuePermissions: String)

        # Value @valueIndex
        # Property: @propertyIri

        @* Construct the value. *@
        ?newValue@valueIndex rdf:type ?valueType@valueIndex ;
            knora-base:isDeleted false  ;
            knora-base:valueHasString """@value.toString""" .

        @value match {

            case textValueSimple: TextValueSimpleV1 => {
                @* nothing to do *@
            }

            case textValueWithStandoff: TextValueWithStandoffV1 => {

                @* Create a Standoff node for each StandoffTagV1. *@

                ?newValue@valueIndex knora-base:valueHasMapping <@textValueWithStandoff.mappingIri> .

                @for((createStandoff, standoffNodeIndex) <- textValueWithStandoff.prepareForSparqlInsert(newValueIri).zipWithIndex) {

                    ?newValue@valueIndex knora-base:valueHasStandoff <@createStandoff.standoffTagInstanceIri> .

                    <@createStandoff.standoffTagInstanceIri>

                            @*

                            Check for optional standoff properties

                            *@

                            @if(createStandoff.standoffNode.endIndex.isDefined) {
                                knora-base:standoffTagHasEndIndex @createStandoff.standoffNode.endIndex.get ;
                            }

                            @if(createStandoff.startParentIri.isDefined) {
                                knora-base:standoffTagHasStartParent <@createStandoff.startParentIri.get> ;
                            }

                            @if(createStandoff.endParentIri.isDefined) {
                                knora-base:standoffTagHasEndParent <@createStandoff.endParentIri.get> ;
                            }

                            @if(createStandoff.standoffNode.originalXMLID.isDefined) {
                                knora-base:standoffTagHasOriginalXMLID """@createStandoff.standoffNode.originalXMLID.get""" ;
                            }

                            @*

                            Handle standoff class specific standoff properties

                            *@
                            @for(createProperty <- createStandoff.standoffNode.attributes) {

                                <@createProperty.standoffPropertyIri> @createProperty.rdfValue ;

                            }

                            knora-base:standoffTagHasStartIndex @createStandoff.standoffNode.startIndex ;
                            knora-base:standoffTagHasUUID """@createStandoff.standoffNode.uuid""" ;
                            knora-base:standoffTagHasStart @createStandoff.standoffNode.startPosition ;
                            knora-base:standoffTagHasEnd @createStandoff.standoffNode.endPosition ;
                            rdf:type <@createStandoff.standoffNode.standoffTagClassIri> .

                }
            }

            case intValue: IntegerValueV1 => {

                ?newValue@valueIndex knora-base:valueHasInteger @intValue.ival .

            }

            case decimalValue: DecimalValueV1 => {

                ?newValue@valueIndex knora-base:valueHasDecimal "@decimalValue.dval"^^xsd:decimal .

            }

            case booleanValue: BooleanValueV1 => {

                ?newValue@valueIndex knora-base:valueHasBoolean @booleanValue.bval .

            }

            case uriValue: UriValueV1 => {

                ?newValue@valueIndex knora-base:valueHasUri """@uriValue.uri""" .

            }

            case jdnValue: JulianDayNumberValueV1 => {

                ?newValue@valueIndex knora-base:valueHasStartJDN @jdnValue.dateval1 ;
                                     knora-base:valueHasEndJDN @jdnValue.dateval2 ;
                                     knora-base:valueHasStartPrecision "@jdnValue.dateprecision1" ;
                                     knora-base:valueHasEndPrecision "@jdnValue.dateprecision2" ;
                                     knora-base:valueHasCalendar "@jdnValue.calendar" .

            }

            case colorValue: ColorValueV1 => {

                ?newValue@valueIndex knora-base:valueHasColor """@colorValue.color""" .

            }

            case geometryValue: GeomValueV1 => {

                ?newValue@valueIndex knora-base:valueHasGeometry """@geometryValue.geom""" .

            }

            case stillImageFileValue: StillImageFileValueV1 => {
                ?newValue@valueIndex knora-base:originalFilename """@stillImageFileValue.originalFilename""" ;
                                     knora-base:originalMimeType """@stillImageFileValue.originalMimeType""" ;
                                     knora-base:internalFilename """@stillImageFileValue.internalFilename""" ;
                                     knora-base:internalMimeType """@stillImageFileValue.internalMimeType""" ;
                                     knora-base:dimX @stillImageFileValue.dimX ;
                                     knora-base:dimY @stillImageFileValue.dimY ;
                                     knora-base:qualityLevel @stillImageFileValue.qualityLevel ;
                                     knora-base:valueHasQname """@stillImageFileValue.qualityName""" .

                @if(stillImageFileValue.isPreview) {
                    ?newValue@valueIndex knora-base:isPreview true .
                }

            }

            case textFileValue: TextFileValueV1 => {
                ?newValue@valueIndex knora-base:originalFilename """@textFileValue.originalFilename""" ;
                                     knora-base:originalMimeType """@textFileValue.originalMimeType""" ;
                                     knora-base:internalFilename """@textFileValue.internalFilename""" ;
                                     knora-base:internalMimeType """@textFileValue.internalMimeType""" .
            }

            case listValue: HierarchicalListValueV1 => {

                ?newValue@valueIndex knora-base:valueHasListNode <@listValue.hierarchicalListIri> .

            }

            case intervalValue: IntervalValueV1 => {

                ?newValue@valueIndex knora-base:valueHasIntervalStart @intervalValue.timeval1 ;
                                     knora-base:valueHasIntervalEnd @intervalValue.timeval2 .

            }

            case geonameValue: GeonameValueV1 => {

                ?newValue@valueIndex knora-base:valueHasGeonameCode """@geonameValue.geonameCode""" .

            }

            case other => {
                @{throw SparqlGenerationException(s"Value object $other is not supported in this SPARQL template"); ()}
            }
        }

        @* TODO: add remaining types. *@

        @* Insert the value's comment, if given. *@
        @maybeComment match {
            case Some(comment) => {
                ?newValue@valueIndex knora-base:valueHasComment """@comment""" .
            }

            case None => {}
        }

        ?newValue@valueIndex knora-base:attachedToUser <@valueCreator> ;
            knora-base:hasPermissions "@valuePermissions" ;
            knora-base:valueHasOrder ?nextOrder@valueIndex ;
            knora-base:valueCreationDate ?currentTime .

        @* Insert direct links and LinkValues for resource references. *@
        @{
            queries.sparql.v1.txt.generateInsertStatementsForStandoffLinks(linkUpdates = linkUpdates)
        }

        @* Attach the value to the resource. *@
        ?resource ?property@valueIndex ?newValue@valueIndex .
