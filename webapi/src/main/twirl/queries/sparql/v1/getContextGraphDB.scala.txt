@*
 * Copyright Â© 2021 - 2022 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI

@**
 * Given the IRI of a resource, gets information about the resources that are part of that resource, using GraphDB.
 *
 * This template is used only by getContext.scala.txt.
 *
 * Since the triplestore type is GraphDB, we assume that inference is enabled, and we use it to optimise the generated
 * SPARQL. Specifically, we use inference to return search results matching subproperties of Knora base properties
 * such as knora-base:isPartOf. This requires us to use GraphDB's GRAPH <http://www.ontotext.com/explicit>
 * whenever we need to get explicit (non-inferred) statements.
 *
 * @param resourceIri the IRI of the resource.
 *@
@(resourceIri: IRI)

prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix knora-base: <http://www.knora.org/ontology/knora-base#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?sourceObject
       ?sourceObjectAttachedToUser
       ?sourceObjectAttachedToProject
       ?sourceObjectPermissions
       ?seqnum
       ?linkValue
       ?linkValueCreator
       ?linkValuePermissions
       ?firstprop
       ?fileValue
       ?internalFilename
       ?internalMimeType
       ?originalFilename
       ?dimX
       ?dimY
       ?fileValuePermissions
       ?fileValueAttachedToUser
WHERE {
    BIND(IRI("@resourceIri") as ?resource)

    ?resource rdf:type knora-base:Resource ;
         knora-base:isDeleted false .

    # Find something that relates to this resource via knora-base:isPartOf.

    ?sourceObject knora-base:isPartOf ?resource ;
        knora-base:isDeleted false .

    GRAPH <http://www.ontotext.com/explicit> {
        ?sourceObject ?linkingProp ?resource .
    }

    OPTIONAL {
        ?sourceObject knora-base:seqnum ?seqnumVal .
        ?seqnumVal knora-base:valueHasInteger ?seqnum .
    }

    ?sourceObject rdfs:label ?firstprop ;
        knora-base:attachedToUser ?sourceObjectAttachedToUser ;
        knora-base:attachedToProject ?sourceObjectAttachedToProject ;
        knora-base:hasPermissions ?sourceObjectPermissions .

    ?sourceObject knora-base:hasLinkToValue ?linkValue .

    ?linkValue rdf:type knora-base:LinkValue ;
        rdf:subject ?sourceObject ;
        rdf:predicate ?linkingProp ;
        rdf:object ?resource ;
        knora-base:isDeleted false ;
        knora-base:attachedToUser ?linkValueCreator ;
        knora-base:hasPermissions ?linkValuePermissions .

    OPTIONAL {
        ?sourceObject knora-base:hasFileValue ?fileValue .

        ?fileValue a knora-base:StillImageFileValue ;
             knora-base:isDeleted false .

        ?fileValue knora-base:internalMimeType ?internalMimeType ;
                 knora-base:originalFilename ?originalFilename ;
                 knora-base:internalFilename ?internalFilename ;
                 knora-base:dimX ?dimX ;
                 knora-base:dimY ?dimY ;
                 knora-base:attachedToUser ?fileValueAttachedToUser ;
                 knora-base:hasPermissions ?fileValuePermissions .
    }
}
ORDER BY ?seqnum ?sourceObject ?isPreview
