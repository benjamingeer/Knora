@*
 * Copyright © 2015 Lukas Rosenthaler, Benjamin Geer, Ivan Subotic,
 * Tobias Schweizer, André Kilchenmann, and André Fatton.
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi._
@import org.knora.webapi.twirl.GraphQueryConstants._

@**
 * Given the IRI of an initial resource, gets the graph of links to and from that resource, up to a specified
 * depth, not including deleted links, links to or from deleted resources, or links that are subproperties of
 * knora-base:isPartOf. The query returns results using CONSTRUCT, describing each node and each edge in the graph.
 * Each subject is either a resource or a LinkValue.
 *
 * @param triplestore the name of the triplestore being used.
 * @param initialIri the IRI of the initial resource.
 * @param depth the maximum depth of the search.
 *@
@(triplestore: String,
  initialIri: IRI,
  depth: Int)

@if(depth < 1) {
    @{throw SparqlGenerationException(s"depth must be greater than 1 in this SPARQL template"); ()}
}


PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

CONSTRUCT
{
    ?node a ?nodeClass ;
        rdfs:label ?nodeLabel ;
        knora-base:attachedToUser ?nodeOwner ;
        knora-base:attachedToProject ?nodeProject ;
        knora-base:hasPermissions ?nodePermissions .

    ?linkValue a knora-base:LinkValue ;
        rdf:subject ?linkValueSubj ;
        rdf:predicate ?linkValuePred ;
        rdf:object ?linkValueObj ;
        knora-base:attachedToUser ?linkValueOwner ;
        knora-base:attachedToProject ?linkValueProject ;
        knora-base:hasPermissions ?linkValuePermissions .
}
@if(triplestore.startsWith("graphdb")) {
    FROM <http://www.ontotext.com/explicit>
}
WHERE
{
    {
        SELECT *  WHERE
        {
            {
                BIND(IRI("@initialIri") AS ?@Initial) .
                ?@Initial knora-base:isDeleted false .

                @* A list of variable names for the sources of outbound links. *@
                @defining(Initial +: (1 to (depth - 1)).map(i => s"$OutboundNode$i")) { outboundSources =>

                    @* A list of variable names for the targets of outbound links. *@
                    @defining((1 to depth).map(i => s"$OutboundNode$i")) { outboundTargets =>

                        @* A list of 3-tuples (source, target, index) for making variable names to find outbound links. *@
                        @defining(outboundSources.zip(outboundTargets).zip(1 to depth).map { case ((source, target), index) => (source, target, index) }) { outboundVars =>

                            @for((source, target, index) <- outboundVars) {

                                @if(index > 1) {

                                    OPTIONAL

                                }

                                @LeftBrace
                                    ?outboundProp@index rdfs:subPropertyOf* knora-base:hasLinkTo .

                                    MINUS
                                    {
                                        ?outboundProp@index rdfs:subPropertyOf* knora-base:isPartOf .
                                    }

                                    ?@source ?outboundProp@index ?@target .
                                    ?@target knora-base:isDeleted false .

                                    ?outboundLinkValue@index a knora-base:LinkValue ;
                                        rdf:subject ?@source ;
                                        rdf:predicate ?outboundProp@index ;
                                        rdf:object ?@target ;
                                        knora-base:isDeleted false .

                            }
                        }
                    }
                }

                @for(i <- 1 to depth) { @RightBrace }

                UNION

                @* A list of variable names for the sources of inbound links. *@
                @defining((1 to depth).map(i => s"$InboundNode$i")) { inboundSources =>

                    @* A list of variable names for the targets of inbound links. *@
                    @defining(Initial +: (1 to (depth - 1)).map(i => s"$InboundNode$i")) { inboundTargets =>

                        @* A list of 3-tuples (source, target, index) for making variable names to find inbound links. *@
                        @defining(inboundSources.zip(inboundTargets).zip(1 to depth).map { case ((source, target), index) => (source, target, index) }) { inboundVars =>

                            @for((source, target, index) <- inboundVars) {

                                @if(index > 1) {

                                    OPTIONAL

                                }

                                @LeftBrace
                                    ?inboundProp@index rdfs:subPropertyOf* knora-base:hasLinkTo .

                                    MINUS
                                    {
                                        ?inboundProp@index rdfs:subPropertyOf* knora-base:isPartOf .
                                    }

                                    ?@source ?inboundProp@index ?@target .
                                    ?@source knora-base:isDeleted false .

                                    ?inboundLinkValue@index a knora-base:LinkValue ;
                                        rdf:subject ?@source ;
                                        rdf:predicate ?inboundProp@index ;
                                        rdf:object ?@target ;
                                        knora-base:isDeleted false .

                            }
                        }
                    }
                }

                @for(i <- 1 to depth) { @RightBrace }
            }
        }
    }

    {
        FILTER BOUND(?@Initial)
        BIND(?@Initial AS ?node)

        ?node a ?nodeClass .
        ?node rdfs:label ?nodeLabel .
        ?node knora-base:attachedToUser ?nodeOwner .
        ?node knora-base:attachedToProject ?nodeProject .
        ?node knora-base:hasPermissions ?nodePermissions .
    }

    @for(index <- 1 to depth) {

        UNION
        {
            FILTER BOUND(?@OutboundNode@index)
            BIND(?@OutboundNode@index AS ?node)

            ?node a ?nodeClass .
            ?node rdfs:label ?nodeLabel .
            ?node knora-base:attachedToUser ?nodeOwner .
            ?node knora-base:attachedToProject ?nodeProject .
            ?node knora-base:hasPermissions ?nodePermissions .
        }
        UNION
        {
            FILTER BOUND(?@InboundNode@index)
            BIND(?@InboundNode@index AS ?node)

            ?node a ?nodeClass .
            ?node rdfs:label ?nodeLabel .
            ?node knora-base:attachedToUser ?nodeOwner .
            ?node knora-base:attachedToProject ?nodeProject .
            ?node knora-base:hasPermissions ?nodePermissions .
        }
        UNION
        {
            FILTER BOUND(?@OutboundLinkValue@index)
            BIND(?@OutboundLinkValue@index AS ?linkValue)

            ?linkValue rdf:subject ?linkValueSubj ;
                rdf:predicate ?linkValuePred ;
                rdf:object ?linkValueObj ;
                knora-base:attachedToUser ?linkValueOwner ;
                knora-base:hasPermissions ?linkValuePermissions .

            OPTIONAL {
                ?linkValue knora-base:attachedToProject ?linkValueProject .
            }
        }
        UNION
        {
            FILTER BOUND(?@InboundLinkValue@index)
            BIND(?@InboundLinkValue@index AS ?linkValue)

            ?linkValue rdf:subject ?linkValueSubj ;
                rdf:predicate ?linkValuePred ;
                rdf:object ?linkValueObj ;
                knora-base:attachedToUser ?linkValueOwner ;
                knora-base:hasPermissions ?linkValuePermissions .

            OPTIONAL {
                ?linkValue knora-base:attachedToProject ?linkValueProject .
            }
        }
    }
}
