@*
 * Copyright © 2015 Lukas Rosenthaler, Benjamin Geer, Ivan Subotic,
 * Tobias Schweizer, André Kilchenmann, and André Fatton.
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.twirl.SearchCriterion
@import org.knora.webapi.messages.v1.responder.searchmessages.SearchComparisonOperatorV1
@import org.knora.webapi.SparqlGenerationException

@**
 * Performs an extended search.
 *
 * @param triplestore the name of the triplestore being used.
 * @param countResults if true, just returns a count of the number of results.
 * @param searchCriteria a list of maps containing search criteria, each of which contains:
 * @param preferredLanguage the language code of the user's preferred language.
 * @param fallbackLanguage the language code of the application's default language.
 * @param projectIri if filtering by project is desired, the IRI of the project to search.
 * @param restypeIri if filtering by resource type is desired, the IRI of the resource type to search for.
 * @param ownerIri if filtering by owner is desired, the IRI of the resource owner to search for.
 * @param offset the offset at which to start returning search results.
 * @param limit the maximum number of search results to return.
 *@
@(triplestore: String,
  countResults: Boolean,
  searchCriteria: Seq[SearchCriterion],
  preferredLanguage: String,
  fallbackLanguage: String,
  projectIriOption: Option[IRI],
  restypeIriOption: Option[IRI],
  ownerIriOption: Option[IRI],
  offsetOption: Option[Int],
  limitOption: Option[Int])

@*

For each search result, we must return the literal that matched (?literal0, ?literal1, etc.).

In order for OFFSET and LIMIT to work, search queries must return only one row per matching resource. Therefore:

1. If a single resource could match multiple times (e.g. because it is a book with two titles that both
   match the search criteria), we have to collapse it to a single row. Since the v1 API can only return one
   literal value per matching property anyway, we do this by selecting one arbitrarily, using the SAMPLE
   function.

2. To get the permissions declared on each matching resource (so we can decide whether the user is authorised to
   see it in the search results), we use the GROUP_CONCAT function.

*@

prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix knora-base: <http://www.knora.org/ontology/knora-base#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

@if(countResults) {
SELECT (COUNT(DISTINCT ?resource) as ?count)
} else {
SELECT DISTINCT
    ?resource
    ?resourceLabel @* The label of a matching resource. This is called "firstprop" in the v1 API. *@
    ?resourceClass
    ?previewPath
    ?previewDimX
    ?previewDimY
    ?attachedToUser
    ?attachedToProject
    @for((searchCriterion, index) <- searchCriteria.zipWithIndex) {
        (SAMPLE(?anyLiteral@index) AS ?literal@index)
    }
    (GROUP_CONCAT(DISTINCT(?permissionAssertion); separator=";") AS ?permissionAssertions)
}
@* Ensure that inference is not used in this query. *@
@if(triplestore.startsWith("graphdb")) {
    FROM <http://www.ontotext.com/explicit>
}
WHERE {
    BIND(STR("@preferredLanguage") AS ?preferredLanguage)
    BIND(STR("@fallbackLanguage") AS ?fallbackLanguage)

    @for((searchCriterion, index) <- searchCriteria.zipWithIndex) {

        @*

        If this search criterion involves a property that points to a knora-base:Value, find a resource that has
        that property pointing to some value. If this search criterion involves a link property, the property will
        point to another resource, and this is handled in the cases for comparison operators EQ and EXISTS in the
        match-case expression below.

        *@

        @if(searchCriterion.valueType != "http://www.knora.org/ontology/knora-base#Resource") {
            ?resource <@{searchCriterion.propertyIri}> ?valueObjectIri@index ;
                knora-base:isDeleted false .
            ?valueObjectIri@index knora-base:isDeleted false .
        }

        # Search criterion @index: operator @searchCriterion.comparisonOperator

        @*

        possible values of searchCriterion.comparisonOperator: EXISTS, EQ, NOT_EQ, GT, GT_EQ, LT, LT_EQ, MATCH, MATCH_BOOLEAN, LIKE, NOT_LIKE, IN

        *@

        @searchCriterion.comparisonOperator match {

            case SearchComparisonOperatorV1.MATCH => {

                @*

                    TODO: Handle single search terms correctly: combine them with an AND

                *@

                @triplestore match {

                    case "graphdb" | "graphdb-free" => {

                        ?valueObjectIri@index knora-base:valueHasString ?anyLiteral@index .
                        ?anyLiteral@index <http://www.ontotext.com/owlim/lucene#fullTextSearchIndex> '@searchCriterion.searchValue' .

                    }

                    case "embedded-jena-tdb" | "fuseki" => {

                        ?valueObjectIri@index <http://jena.apache.org/text#query> ( '@searchCriterion.searchValue' ) .
                        ?valueObjectIri@index knora-base:valueHasString ?anyLiteral@index .

                    }

                    case other => {
                        @{throw SparqlGenerationException(s"Triplestore type $other is not supported in this SPARQL template"); ()}
                    }
                }
            }

            case SearchComparisonOperatorV1.LIKE => {

                @* TODO: escape regex metachars *@
                ?valueObjectIri@index knora-base:valueHasString ?anyLiteral@index .

                FILTER regex(?anyLiteral@index, '@searchCriterion.searchValue', "i")
            }

            case SearchComparisonOperatorV1.NOT_LIKE => {

                @*

                Previously we used FILTER NOT EXISTS here, but then we couldn't get the value of ?anyLiteral
                (the literal that doesn't match the regex). So now we use just a negated regex. However, if a
                resource has two instances of the same property and one of them matches and the other doesn't,
                it will be returned in the search results.

                *@

                ?valueObjectIri@index knora-base:valueHasString ?anyLiteral@index .

                FILTER (!regex(?anyLiteral@index, '@searchCriterion.searchValue', "i"))
            }

            case SearchComparisonOperatorV1.EXISTS => {

                @searchCriterion.valueType match {
                    case "http://www.knora.org/ontology/knora-base#Resource" => {

                        ?resource <@{searchCriterion.propertyIri}> ?targetResource@index .

                        ?targetResource@index rdfs:label ?anyLiteral@index ;
                            knora-base:isDeleted false .
                    }

                    case other => {

                        ?valueObjectIri@index knora-base:valueHasString ?anyLiteral@index .

                    }
                }
            }

            case SearchComparisonOperatorV1.EQ => {

                @searchCriterion.valueType match {

                    case "http://www.knora.org/ontology/knora-base#TextValue" => {

                        ?valueObjectIri@index knora-base:valueHasString '@searchCriterion.searchValue' .

                        BIND('@searchCriterion.searchValue' AS ?anyLiteral@index)

                    }

                    case "http://www.knora.org/ontology/knora-base#IntValue" => {

                        ?valueObjectIri@index knora-base:valueHasInteger @searchCriterion.searchValue .

                        BIND('@searchCriterion.searchValue' AS ?anyLiteral@index)

                    }

                    case "http://www.knora.org/ontology/knora-base#FloatValue" => {

                        ?valueObjectIri@index knora-base:valueHasFloat @searchCriterion.searchValue .

                        BIND('@searchCriterion.searchValue' AS ?anyLiteral@index)

                    }

                    case "http://www.knora.org/ontology/knora-base#DateValue" => {

                        ?valueObjectIri@index knora-base:valueHasStartJDC ?dateStart@index .
                        ?valueObjectIri@index knora-base:valueHasEndJDC ?dateEnd@index .
                        ?valueObjectIri@index knora-base:valueHasString ?dateString@index .

                        FILTER (@searchCriterion.dateStart <= ?dateEnd@index && @searchCriterion.dateEnd >= ?dateStart@index)
                        BIND(?dateString@index as ?anyLiteral@index)

                    }

                    case "http://www.knora.org/ontology/knora-base#Resource" => {

                        ?resource <@searchCriterion.propertyIri> <@searchCriterion.searchValue> .

                        <@searchCriterion.searchValue> rdfs:label ?anyLiteral@index ;
                            knora-base:isDeleted false .
                    }

                    case "http://www.knora.org/ontology/knora-base#ListValue" => {

                        @*

                        Get all the subnodes of the given node, including the given node (operator *)

                        *@

                        ?valueObjectIri@index knora-base:valueHasListNode ?listNode .
                        <@searchCriterion.searchValue> knora-base:hasSubListNode* ?listNode .

                        ?listNode rdfs:label ?listNodeLabel .
                        BIND(?listNodeLabel AS ?anyLiteral@index)

                    }

                    case other => {
                        @{throw SparqlGenerationException(s"Value type $other is not supported with comparison operator ${searchCriterion.comparisonOperator}"); ()}
                    }
                }
            }

            case SearchComparisonOperatorV1.NOT_EQ => {

                @searchCriterion.valueType match {

                    case "http://www.knora.org/ontology/knora-base#TextValue" => {

                        ?valueObjectIri@index knora-base:valueHasString ?anyLiteral@index .

                        FILTER (?anyLiteral@index != '@searchCriterion.searchValue')

                    }

                    case "http://www.knora.org/ontology/knora-base#IntValue" => {

                        ?valueObjectIri@index knora-base:valueHasInteger ?anyLiteral@index .

                        FILTER (?anyLiteral@index != @searchCriterion.searchValue)

                    }

                    case "http://www.knora.org/ontology/knora-base#FloatValue" => {

                        ?valueObjectIri@index knora-base:valueHasFloat ?anyLiteral@index .

                        FILTER (?anyLiteral@index != @searchCriterion.searchValue)

                    }

                    case "http://www.knora.org/ontology/knora-base#DateValue" => {

                        ?valueObjectIri@index knora-base:valueHasStartJDC ?dateStart@index .
                        ?valueObjectIri@index knora-base:valueHasEndJDC ?dateEnd@index .
                        ?valueObjectIri@index knora-base:valueHasString ?dateString@index .

                        FILTER (@searchCriterion.dateEnd < ?dateStart@index || @searchCriterion.dateStart > ?dateEnd@index )
                        BIND(?dateString@index as ?anyLiteral@index)

                    }

                    case other => {
                        @{throw SparqlGenerationException(s"Value type $other is not supported with comparison operator ${searchCriterion.comparisonOperator}"); ()}
                    }
                }
            }

            case SearchComparisonOperatorV1.GT => {

                @searchCriterion.valueType match {

                    case "http://www.knora.org/ontology/knora-base#IntValue" => {

                        ?valueObjectIri@index knora-base:valueHasInteger ?anyLiteral@index .

                        FILTER (?anyLiteral@index > @searchCriterion.searchValue)

                    }

                    case "http://www.knora.org/ontology/knora-base#FloatValue" => {

                        ?valueObjectIri@index knora-base:valueHasFloat ?anyLiteral@index .

                        FILTER (?anyLiteral@index > searchCriterion.searchValue )

                    }

                    case "http://www.knora.org/ontology/knora-base#DateValue" => {

                        ?valueObjectIri@index knora-base:valueHasStartJDC ?dateStart@index .
                        ?valueObjectIri@index knora-base:valueHasString ?dateString@index .

                        FILTER (?dateStart@index > @searchCriterion.dateEnd)
                        BIND(?dateString@index as ?anyLiteral@index)

                    }

                    case other => {
                        @{throw SparqlGenerationException(s"Value type $other is not supported with comparison operator ${searchCriterion.comparisonOperator}"); ()}
                    }
                }
            }

            case SearchComparisonOperatorV1.GT_EQ => {

                @searchCriterion.valueType match {

                    case "http://www.knora.org/ontology/knora-base#IntValue" => {

                        ?valueObjectIri@index knora-base:valueHasInteger ?anyLiteral@index .

                        FILTER (?anyLiteral@index >= @searchCriterion.searchValue)

                    }

                    case "http://www.knora.org/ontology/knora-base#FloatValue" => {

                        ?valueObjectIri@index knora-base:valueHasFloat ?anyLiteral@index .

                        FILTER (?anyLiteral@index >= @searchCriterion.searchValue)

                    }

                    case "http://www.knora.org/ontology/knora-base#DateValue" => {

                        ?valueObjectIri@index knora-base:valueHasStartJDC ?dateStart@index .
                        ?valueObjectIri@index knora-base:valueHasString ?dateString@index .

                        FILTER (?dateStart@index >= @searchCriterion.dateEnd)
                        BIND(?dateString@index as ?anyLiteral@index)

                    }

                    case other => {
                        @{throw SparqlGenerationException(s"Value type $other is not supported with comparison operator ${searchCriterion.comparisonOperator}"); ()}
                    }
                }
            }

            case SearchComparisonOperatorV1.LT => {

                @searchCriterion.valueType match {

                    case "http://www.knora.org/ontology/knora-base#IntValue" => {

                        ?valueObjectIri@index knora-base:valueHasInteger ?anyLiteral@index .

                        FILTER (?anyLiteral@index < @searchCriterion.searchValue)

                    }

                    case "http://www.knora.org/ontology/knora-base#FloatValue" => {

                        ?valueObjectIri@index knora-base:valueHasInteger ?anyLiteral@index .

                        FILTER (?anyLiteral@index < @searchCriterion.searchValue)

                    }

                    case "http://www.knora.org/ontology/knora-base#DateValue" => {

                        ?valueObjectIri@index knora-base:valueHasEndJDC ?dateEnd@index .
                        ?valueObjectIri@index knora-base:valueHasString ?dateString@index .

                        FILTER (?dateEnd@index < @searchCriterion.dateStart)
                        BIND(?dateString@index as ?anyLiteral@index)

                    }

                    case other => {
                        @{throw SparqlGenerationException(s"Value type $other is not supported with comparison operator ${searchCriterion.comparisonOperator}"); ()}
                    }
                }
            }

            case SearchComparisonOperatorV1.LT_EQ => {

                @searchCriterion.valueType match {

                    case "http://www.knora.org/ontology/knora-base#IntValue" => {

                        ?valueObjectIri@index knora-base:valueHasInteger ?anyLiteral@index .

                        FILTER (?anyLiteral@index <= @searchCriterion.searchValue)

                    }

                    case "http://www.knora.org/ontology/knora-base#FloatValue" => {

                        ?valueObjectIri@index knora-base:valueHasInteger ?anyLiteral@index .

                        FILTER (?anyLiteral@index <= @searchCriterion.searchValue)

                    }

                    case "http://www.knora.org/ontology/knora-base#DateValue" => {

                        ?valueObjectIri@index knora-base:valueHasEndJDC ?dateEnd@index .
                        ?valueObjectIri@index knora-base:valueHasString ?dateString@index .

                        FILTER (?dateEnd@index <= @searchCriterion.dateStart)
                        BIND(?dateString@index as ?anyLiteral@index)

                    }

                    case other => {
                        @{throw SparqlGenerationException(s"Value type $other is not supported with comparison operator ${searchCriterion.comparisonOperator}"); ()}
                    }
                }
            }

            case SearchComparisonOperatorV1.MATCH_BOOLEAN => {

                @* see https://dev.mysql.com/doc/refman/5.5/en/fulltext-boolean.html *@

                ?valueObjectIri@index knora-base:valueHasString ?anyLiteral@index .

                @for(positiveTerm <- searchCriterion.matchBooleanPositiveTerms) {

                    @triplestore match {

                        case "graphdb" | "graphdb-free" => {

                            ?anyLiteral@index <http://www.ontotext.com/owlim/lucene#fullTextSearchIndex> '@positiveTerm' .

                        }

                        case "embedded-jena-tdb" | "fuseki" => {

                            ?valueObjectIri@index <http://jena.apache.org/text#query> ( '@positiveTerm' ) .

                        }

                        case other => {
                            @{throw SparqlGenerationException(s"Triplestore type $other is not supported in this SPARQL template"); ()}
                        }
                    }
                }

                @if(searchCriterion.matchBooleanNegativeTerms.nonEmpty) {
                    MINUS {
                        @for(negativeTerm <- searchCriterion.matchBooleanNegativeTerms) {

                            @triplestore match {

                                case "graphdb" | "graphdb-free" => {

                                    ?anyLiteral@index <http://www.ontotext.com/owlim/lucene#fullTextSearchIndex> '@negativeTerm' .

                                }

                                case "embedded-jena-tdb" | "fuseki" => {

                                    ?valueObjectIri@index <http://jena.apache.org/text#query> ( '@negativeTerm' ) .

                                }

                                case other => {
                                    @{throw SparqlGenerationException(s"Triplestore type $other is not supported in this SPARQL template"); ()}
                                }
                            }
                        }
                    }
                }
            }

            case other => {
                @{throw SparqlGenerationException(s"Comparison operator $other is not supported in this SPARQL template"); ()}
            }
        }
    }

    ?resource rdfs:label ?resourceLabel .
    ?resource a ?resourceClass .

    @projectIriOption match {
        case Some(projectIri) => {

            # filter by projectIri
            ?resource knora-base:attachedToProject <@projectIri> .

        }

        case None => {}
    }

    @restypeIriOption match {
        case Some(restypeIri) => {

            # filter by restypeIri
            ?resource a <@restypeIri> .
        }

        case None => {}
    }


    @ownerIriOption match {
        case Some(ownerIri) => {

            # filter by ownerIri
            ?resource knora-base:attachedToUser <@ownerIri> .
        }

        case None => {}
    }

    OPTIONAL {
        ?resource knora-base:hasStillImageFileValue ?fileValue .
        ?fileValue a knora-base:StillImageFileValue .
        ?fileValue knora-base:isPreview true .
        ?fileValue knora-base:internalFilename ?previewPath .

        OPTIONAL {
            ?fileValue knora-base:dimX ?previewDimX .
            ?fileValue knora-base:dimY ?previewDimY .
        }
    }

    OPTIONAL {
        ?permission rdfs:subPropertyOf+ knora-base:hasPermission .
        ?resource ?permission ?group .
        BIND(CONCAT(STR(?permission), ",", STR(?group)) as ?permissionAssertion)
    }

    OPTIONAL {
        ?resource knora-base:attachedToUser ?attachedToUser .
    }

    OPTIONAL {
        ?resource knora-base:attachedToProject ?attachedToProject .
    }
}
@if(!countResults) {
GROUP BY
    ?resource
    ?resourceLabel
    ?resourceClass
    ?previewPath
    ?previewDimX
    ?previewDimY
    ?attachedToUser
    ?attachedToProject

ORDER BY ?resource
}

@offsetOption match {
    case Some(offset) => {
        OFFSET @offset
    }

    case None => {}
}

@limitOption match {
    case Some(limit) => {
        LIMIT @limit
    }

    case None => {}
}
