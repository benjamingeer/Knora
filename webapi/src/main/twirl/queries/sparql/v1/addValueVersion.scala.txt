@*
 * Copyright © 2015 Lukas Rosenthaler, Benjamin Geer, Ivan Subotic,
 * Tobias Schweizer, André Kilchenmann, and André Fatton.
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi._
@import org.knora.webapi.twirl.SparqlTemplateLinkUpdate
@import org.knora.webapi.messages.v1.responder.valuemessages._

@**
 * Inserts a new version of an existing value of a resource property.
 *
 * @param dataNamedGraph the named graph to update.
 * @param triplestore the name of the triplestore being used.
 * @param resourceIri the resource to update.
 * @param propertyIri the IRI of the property that points from the resource to the value.
 * @param currentValueIri the most recent existing version of the value.
 * @param newValueIri the new value IRI.
 * @param valueTypeIri the type of the new value.
 * @param permissionRelevantAssertions Permission-relevant assertions, i.e. owner and project plus permissions, in
 *        the form of a list of tuples (predicate, object).
 * @param value the value to insert.
 * @param an optional comment on the new value.
 * @param linkUpdates a list of [[linkUpdate]] objects describing links and LinkValues that need to be
 *        updated for resource references.
 *
 * This operation will do nothing if `currentValueIri` is not in fact the most recent version, if `valueTypeIri` is
 * the wrong type for the property, or if the resource or the current value are nonexistent or marked as deleted. To
 * find out whether the operation succeeded, the application must query the property's version history.
 *@
@(dataNamedGraph: IRI,
  triplestore: String,
  resourceIri: IRI,
  propertyIri: IRI,
  currentValueIri: IRI,
  newValueIri: IRI,
  valueTypeIri: IRI,
  permissionRelevantAssertions: Seq[(IRI, IRI)],
  value: UpdateValueV1,
  maybeComment: Option[String],
  linkUpdates: Seq[SparqlTemplateLinkUpdate])

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

DELETE {
    GRAPH ?dataNamedGraph {
        @* Detach the current version of the value from the resource. *@
        ?resource ?property ?currentValue .

        @* Delete the resource's last modification date so we can update it. *@
        ?resource knora-base:lastModificationDate ?resourceLastModificationDate .

        @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
            @* Delete direct links for resource references that no longer exist. *@
            @if(linkUpdate.deleteDirectLink) {
                ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }

            @* If any LinkValues need to be updated, detach them from the resource. *@
            @if(linkUpdate.linkValueExists) {
                ?resource <@{linkUpdate.linkPropertyIri}Value> ?linkValue@linkValueIndex .
            }
        }
    }
} INSERT {
    GRAPH ?dataNamedGraph {
        @* Construct the new value version. *@
        ?newValue rdf:type ?valueType ;
            knora-base:isDeleted "false"^^xsd:boolean .

        @value match {
            case textValue: TextValueV1 => {

                ?newValue knora-base:valueHasString """@textValue.utf8str""" .

                @* Create a Standoff node for each StandoffPositionV1. *@

                @for((attribute, position) <- textValue.flattenStandoff) {
                    ?newValue knora-base:valueHasStandoff
                        [
                            @*

                            If the StandoffPositionV1 contains both a resid and an href, we assume that the href is
                            redundant (i.e. it's based on the resid), so we ignore it.

                            *@
                            @(position.resid, position.href) match {
                                case (Some(resid), _) => {
                                    rdf:type knora-base:StandoffLink ;
                                    knora-base:standoffHasAttribute "@attribute" ;
                                    knora-base:standoffHasLink <@resid> ;
                                }

                                case (None, Some(href)) => {
                                    rdf:type knora-base:StandoffHref ;
                                    knora-base:standoffHasAttribute "@attribute" ;
                                    knora-base:standoffHasHref <@href> ;
                                }

                                case (None, None) => {
                                    rdf:type knora-base:StandoffVisualAttribute ;
                                    knora-base:standoffHasAttribute "@attribute" ;
                                }
                            }

                            knora-base:standoffHasStart @position.start ;
                            knora-base:standoffHasEnd @position.end
                        ] .
                }
            }

            case intValue: IntegerValueV1 => {

                ?newValue knora-base:valueHasInteger @intValue.ival .
                ?newValue knora-base:valueHasString """@intValue.toString""" .

            }

            case decimalValue: DecimalValueV1 => {

                ?newValue knora-base:valueHasDecimal "@decimalValue.dval"^^xsd:decimal .
                ?newValue knora-base:valueHasString """@decimalValue.toString""" .

            }

            case booleanValue: BooleanValueV1 => {

                ?newValue knora-base:valueHasBoolean @booleanValue.bval .

            }

            case uriValue: UriValueV1 => {

                ?newValue knora-base:valueHasUri """@uriValue.uri""" .
                ?newValue knora-base:valueHasString """@uriValue.toString""" .

            }

            case jdcValue: JulianDayCountValueV1 => {

                ?newValue knora-base:valueHasStartJDC @jdcValue.dateval1 .
                ?newValue knora-base:valueHasEndJDC @jdcValue.dateval2 .
                ?newValue knora-base:valueHasStartPrecision "@jdcValue.dateprecision1" .
                ?newValue knora-base:valueHasEndPrecision "@jdcValue.dateprecision2" .
                ?newValue knora-base:valueHasCalendar "@jdcValue.calendar" .
                ?newValue knora-base:valueHasString """@jdcValue.toString""" .

            }

            case colorValue: ColorValueV1 => {

                ?newValue knora-base:valueHasColor """@colorValue.color""" .
                ?newValue knora-base:valueHasString """@colorValue.toString""" .

            }

            case geometryValue: GeomValueV1 => {

                ?newValue knora-base:valueHasGeometry """@geometryValue.geom""" .
                ?newValue knora-base:valueHasString """@geometryValue.toString""" .

            }

            case stillImageFileValue: StillImageFileValueV1 => {
                ?newValue knora-base:originalFilename """@stillImageFileValue.originalFilename""" .
                ?newValue knora-base:originalMimeType """@stillImageFileValue.originalMimeType""" .
                ?newValue knora-base:internalFilename """@stillImageFileValue.internalFilename""" .
                ?newValue knora-base:internalMimeType """@stillImageFileValue.internalMimeType""" .
                ?newValue knora-base:dimX @stillImageFileValue.dimX .
                ?newValue knora-base:dimY @stillImageFileValue.dimY .
                ?newValue knora-base:qualityLevel @stillImageFileValue.qualityLevel .
                ?newValue knora-base:valueHasQname """@stillImageFileValue.qualityName""" .

                @if(stillImageFileValue.isPreview) {
                    ?newValue knora-base:isPreview true .
                }

                ?newValue knora-base:valueHasString """@stillImageFileValue.toString""" .
            }

            case listValue: HierarchicalListValueV1 => {

                ?newValue knora-base:valueHasListNode <@listValue.hierarchicalListIri> .
                ?newValue knora-base:valueHasString """@listValue.toString""" .

            }

            case intervalValue: IntervalValueV1 => {

                ?newValue knora-base:valueHasIntervalStart @intervalValue.timeval1 ;
                          knora-base:valueHasIntervalEnd @intervalValue.timeval2 .

            }

            case geonameValue: GeonameValueV1 => {

                ?newValue knora-base:valueHasGeonameCode """@geonameValue.geonameCode""" ;
                          knora-base:valueHasString """@geonameValue.toString""" .

            }

            case other => {
                @{throw SparqlGenerationException(s"Value object $other is not supported in this SPARQL template"); ()}
            }
        }

        @* TODO: add remaining types. *@

        @* Insert the value's comment, if given. *@
        @maybeComment match {
            case Some(comment) => {
                ?newValue knora-base:valueHasComment """@comment""" .
            }

            case None => {}
        }

        @* Insert the value's permission-relevant assertions (its owner, project, and permissions). *@
        @for(assertion <- permissionRelevantAssertions) {
            ?newValue <@assertion._1> <@assertion._2> .
        }

        @* TODO: in case of a file value, order is not given *@
        ?newValue knora-base:valueHasOrder ?order .
        ?newValue knora-base:valueCreationDate ?currentTime .
        ?newValue knora-base:previousValue ?currentValue .

        @* Insert direct links and LinkValues for resource references. *@

        @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
            @* Insert a direct link for the resource reference if necessary. *@
            @if(linkUpdate.insertDirectLink) {
                ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }

            @* Insert a LinkValue for the resource reference. *@
            <@linkUpdate.newLinkValueIri> rdf:type knora-base:LinkValue ;
                rdf:subject ?resource ;
                rdf:predicate <@linkUpdate.linkPropertyIri> ;
                rdf:object <@linkUpdate.linkTargetIri> ;
                knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
                @if(linkUpdate.newReferenceCount == 0) {
                    knora-base:isDeleted true ;
                } else {
                    knora-base:isDeleted false ;
                }
                knora-base:valueCreationDate ?currentTime .

            @for(assertion <- linkUpdate.permissionRelevantAssertions) {
                <@linkUpdate.newLinkValueIri> <@assertion._1> <@assertion._2> .
            }

            @* If we're inserting a new version of an existing LinkValue, attach it to the previous version. *@
            @if(linkUpdate.linkValueExists) {
                <@linkUpdate.newLinkValueIri> knora-base:previousValue ?linkValue@linkValueIndex .
            }

            @* Attach the new LinkValue to its containing resource. *@
            ?resource <@{linkUpdate.linkPropertyIri}Value> <@linkUpdate.newLinkValueIri> .
        }

        @* Attach the value to the resource. *@
        ?resource ?property ?newValue .

        @* Update the resource's last modification date. *@
        ?resource knora-base:lastModificationDate ?currentTime .
    }
}
@* Ensure that inference is not used in the WHERE clause of this update. *@
@if(triplestore.startsWith("graphdb")) {
    USING <http://www.ontotext.com/explicit>
}
WHERE {
    BIND(IRI("@dataNamedGraph") AS ?dataNamedGraph)
    BIND(IRI("@resourceIri") AS ?resource)
    BIND(IRI("@propertyIri") AS ?property)
    BIND(IRI("@currentValueIri") AS ?currentValue)
    BIND(IRI("@newValueIri") AS ?newValue)
    BIND(IRI("@valueTypeIri") AS ?valueType)
    BIND(NOW() AS ?currentTime)

    ?resource ?property ?currentValue .
    ?property knora-base:objectClassConstraint ?valueType .

    @*

        Consider order if given (not given for file values)

    *@

    OPTIONAL {
        ?currentValue knora-base:valueHasOrder ?order .
    }

    @*

    Do nothing if the resource isn't actually a resource.

    *@

    ?resource rdf:type ?resourceClass .
    ?resourceClass rdfs:subClassOf+ knora-base:Resource .

    @* Do nothing if the resource is marked as deleted. *@

    ?resource knora-base:isDeleted false .

    @* Don't add a new version of a deleted value. *@

    ?currentValue knora-base:isDeleted false .

    @*

    Check the state of any LinkValues to be updated for resource references.

    *@

    @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
        @if(linkUpdate.insertDirectLink) {
            @*

            Do nothing if we were asked to insert a direct link to a target that doesn't exist, is marked as deleted,
            isn't a knora-base:Resource, or belongs to the wrong OWL class for the link property.

            *@

            <@linkUpdate.linkTargetIri> rdf:type ?linkTargetClass@linkValueIndex .
            <@linkUpdate.linkTargetIri> knora-base:isDeleted false .

            ?linkTargetClass@linkValueIndex rdfs:subClassOf+ knora-base:Resource .
            <@linkUpdate.linkPropertyIri> knora-base:objectClassConstraint ?expectedTargetClass@linkValueIndex .
            ?linkTargetClass@linkValueIndex rdfs:subClassOf* ?expectedTargetClass@linkValueIndex .
        }

        @if(linkUpdate.directLinkExists) {
            @* Make sure the relevant direct link exists between the two resources. *@
            ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
        } else {
            @* Make sure there no such direct link. *@
            MINUS {
                ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }
        }

        @if(linkUpdate.linkValueExists) {
            @*

            Make sure a knora-base:LinkValue exists, describing the relevant direct link
            between the source and target resources, and has the correct reference count.

            *@
            ?resource <@{linkUpdate.linkPropertyIri}Value> ?linkValue@linkValueIndex .
            ?linkValue@linkValueIndex rdf:type knora-base:LinkValue ;
                rdf:subject ?resource ;
                rdf:predicate <@linkUpdate.linkPropertyIri> ;
                rdf:object <@linkUpdate.linkTargetIri> ;
                knora-base:valueHasRefCount @linkUpdate.currentReferenceCount ;
                knora-base:isDeleted false .
        } else {
            @* Make sure there is no such knora-base:LinkValue. *@
            MINUS {
                ?resource <@{linkUpdate.linkPropertyIri}Value> ?linkValue@linkValueIndex .
                ?linkValue@linkValueIndex rdf:type knora-base:LinkValue ;
                    rdf:subject ?resource ;
                    rdf:predicate <@linkUpdate.linkPropertyIri> ;
                    rdf:object <@linkUpdate.linkTargetIri> ;
                    knora-base:isDeleted false .
            }
        }
    }

    @* Get the resource's last modification date, if it has one, so we can update it. *@

    OPTIONAL {
        ?resource knora-base:lastModificationDate ?resourceLastModificationDate .
    }
}
