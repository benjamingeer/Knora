@*
 * Copyright Â© 2021 - 2022 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi._
@import org.knora.webapi.messages.SmartIri

@*
 * Constructs a prequery that gets resources from the specified project, using standard SPARQL.
 * This template is used only by getResourcesInProjectPrequery.sparql.txt.
 *
 * @param triplestore       the name of the triplestore being used.
 * @param projectIri        the IRI of the project.
 * @param resourceClassIri  the IRI of the resource class.
 * @param orderByProperty   the IRI of the property to order by.
 * @param orderByValuePredicate the predicate of a Knora value class whose object will be used in ORDER BY.
 * @param offset            the OFFSET to be used.
 * @param limit             the LIMIT to be used.
 *@
@(triplestore: String,
  projectIri: IRI,
  resourceClassIri: SmartIri,
  maybeOrderByProperty: Option[SmartIri],
  maybeOrderByValuePredicate: Option[SmartIri],
  offset: Int,
  limit: Int)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

SELECT DISTINCT ?resource
WHERE {
    ?resource knora-base:attachedToProject <@projectIri> ;
        rdf:type <@resourceClassIri> .

    FILTER NOT EXISTS {
        ?resource knora-base:isDeleted true .
    }

    @maybeOrderByProperty match {
        case Some(orderByProperty) => {
            OPTIONAL {
                ?resource <@orderByProperty> ?orderByValue .
                ?orderByValue <@{maybeOrderByValuePredicate.get}> ?orderByValueLiteral .

                FILTER NOT EXISTS {
                    ?resource <@orderByProperty> ?otherOrderByValue .
                    ?otherOrderByValue <@{maybeOrderByValuePredicate.get}> ?otherOrderByValueLiteral .
                    FILTER(?otherOrderByValueLiteral < ?orderByValueLiteral)
                }
            }
        }

        case None => {}
    }
}
ORDER BY
    @if(maybeOrderByProperty.nonEmpty) {
        ASC(?orderByValueLiteral)
    }
    ASC(?resource)
OFFSET @offset
LIMIT @limit
