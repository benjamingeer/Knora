@*
 * Copyright Â© 2015-2019 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import java.time.Instant
@import java.util.UUID
@import org.knora.webapi._
@import org.knora.webapi.util.{SmartIri, StringFormatter}
@import org.knora.webapi.twirl.SparqlTemplateLinkUpdate
@import org.knora.webapi.messages.v2.responder.valuemessages._

@**
 * Inserts a new value of a resource property (as opposed to a new version of an existing value). This template is used only
 * when creating a single value in an existing resource.
 *
 * @param dataNamedGraph the named graph in which the project stores its data.
 * @param triplestore the name of the triplestore being used.
 * @param resourceIri the resource to update.
 * @param propertyIri the resource property to update.
 * @param newValueIri the new value IRI.
 * @param value the value to insert.
 * @param linkUpdates a list of [[LinkUpdate]] objects describing links and LinkValues that need to be
 *        updated for resource references in Standoff text values.
 * @param valueCreator the IRI of the user who created the value.
 * @param valuePermissions the permissions that should be attached to the value.
 * @param creationDate an xsd:dateTimeStamp that should be attached to the value.
 * @param stringFormatter a [[StringFormatter]].
 *
 * The generated WHERE clause does some consistency checks. If these fail, the operation will do nothing.
 * To find out whether the update succeeded, the application must query the property's version history.
 *@
@(dataNamedGraph: IRI,
  triplestore: String,
  resourceIri: IRI,
  propertyIri: SmartIri,
  newValueIri: IRI,
  value: ValueContentV2,
  linkUpdates: Seq[SparqlTemplateLinkUpdate],
  valueCreator: IRI,
  valuePermissions: String,
  creationDate: Instant,
  stringFormatter: StringFormatter)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

DELETE {
    GRAPH ?dataNamedGraph {
        @* Delete the resource's last modification date so we can update it. *@
        ?resource knora-base:lastModificationDate ?resourceLastModificationDate .

        @* If any LinkValues need to be updated, detach them from the resource. *@
        @if(linkUpdates.exists(_.linkValueExists)) {
            @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
                @if(linkUpdate.linkValueExists) {
                    @*

                    If we need to make a new version of an existing LinkValue for a standoff link, the WHERE
                    clause will have bound a SPARQL variable ?linkValueN containing the IRI of the existing LinkValue,
                    where N is an index in the sequence linkUpdates. Detach the existing LinkValue from the resource
                    so we can attach the new version.

                    *@
                    ?resource <@{linkUpdate.linkPropertyIri}Value> ?linkValue@linkValueIndex .

                    @* Delete the UUID from the current version of the link value, because the new version will store it. *@
                    ?linkValue@linkValueIndex knora-base:valueHasUUID ?linkValueUUID@linkValueIndex .
                }
            }
        }
    }
} INSERT {
    GRAPH ?dataNamedGraph {
        ?resource knora-base:lastModificationDate "@creationDate"^^xsd:dateTime .

        @{
            queries.sparql.v2.txt.generateInsertStatementsForCreateValue(resourceIri = resourceIri,
                                                                         propertyIri = propertyIri,
                                                                         value = value,
                                                                         newValueIri = newValueIri,
                                                                         linkUpdates = linkUpdates,
                                                                         valueCreator = valueCreator,
                                                                         valuePermissions = valuePermissions,
                                                                         creationDate = creationDate,
                                                                         maybeValueHasOrder = None,
                                                                         stringFormatter = stringFormatter)
        }
    }
}
@* Ensure that inference is not used in the WHERE clause of this update. *@
@if(triplestore.startsWith("graphdb")) {
    USING <http://www.ontotext.com/explicit>
}
WHERE {
    BIND(IRI("@dataNamedGraph") AS ?dataNamedGraph)
    BIND(IRI("@resourceIri") AS ?resource)

    @* Do nothing if the resource doesn't exist, is marked as deleted, or isn't actually a resource. *@

    ?resource rdf:type ?resourceClass ;
        knora-base:isDeleted false .
    ?resourceClass rdfs:subClassOf* knora-base:Resource .

    @* Get the resource's last modification date, if it has one, so we can update it. *@

    OPTIONAL {
        ?resource knora-base:lastModificationDate ?resourceLastModificationDate .
    }

    @{
        queries.sparql.v2.txt.generateWhereStatementsForCreateValue(resourceIri = resourceIri,
                                                                    propertyIri = propertyIri,
                                                                    newValueIri = newValueIri,
                                                                    value = value,
                                                                    linkUpdates = linkUpdates)
     }
}
