@*
 * Copyright Â© 2015-2019 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import java.time.Instant
@import org.knora.webapi.IRI
@import org.knora.webapi.SparqlGenerationException

@*
 * Performs a resource request using GraphDB.
 *
 * This template is used only by getResourcePropertiesAndValues.scala.txt.
 *
 *
 * @param resourceIris   the Iris of the requested resources.
 * @param preview        indicates if the request should only return preview information.
 * @param maybeTimestamp if defined, requests the state of the resources at the specified
 *                       time in the past. Cannot be used in conjunction with preview.
 *@
@(resourceIris: Seq[IRI],
  preview: Boolean,
  maybeTimestamp: Option[Instant] = None)

@if(preview && maybeTimestamp.isDefined) {
    @{throw SparqlGenerationException(s"A resource preview cannot be requested for a time in the past"); ()}
}

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
CONSTRUCT {
    @* include this inferred information in the results, needed to identify resources *@
    ?resource a knora-base:Resource ;
        knora-base:isDeleted false ;
        knora-base:isMainResource true ;
        knora-base:attachedToProject ?resourceProject ;
        rdfs:label ?label ;
        a ?resourceType ;
        knora-base:attachedToUser ?resourceCreator ;
        knora-base:hasPermissions ?resourcePermissions ;
        knora-base:creationDate ?creationDate ;
        knora-base:lastModificationDate ?lastModificationDate .

    @* include this inferred information in the results, needed to identify value properties *@
    ?resource knora-base:hasValue ?valueObject ;
        ?resourceValueProperty ?valueObject .
    ?valueObject ?valueObjectProperty ?valueObjectValue .

    ?standoffNode ?standoffProperty ?standoffValue .

    @* include this inferred information in the results, needed to identify linking properties *@
    ?resource knora-base:hasLinkTo ?referredResource ;
        ?resourceLinkProperty ?referredResource .

    ?referredResource a knora-base:Resource ;
        knora-base:isDeleted false ;
        rdfs:label ?referredResourceLabel ;
        a ?referredResourceType ;
        knora-base:attachedToUser ?referredResourceCreator ;
        knora-base:hasPermissions ?referredResourcePermissions ;
        knora-base:attachedToProject ?referredResourceProject  ;
        knora-base:creationDate ?referredResourceCreationDate ;
        knora-base:lastModificationDate ?referredResourceLastModificationDate .

    ?valueObject knora-base:valueHasListNode ?listNode .
    ?listNode rdfs:label ?listNodeLabel .

} WHERE {
    VALUES ?resource { @for(resIri <- resourceIris) { <@resIri> } }

    ?resource rdf:type knora-base:Resource ;
        knora-base:attachedToProject ?resourceProject ;
        knora-base:attachedToUser ?resourceCreator ;
        knora-base:hasPermissions ?resourcePermissions ;
        knora-base:creationDate ?creationDate ;
        rdfs:label ?label .

    @* Is this a version history request? *@
    @maybeTimestamp match {
        case Some(timestamp) => {
            @* Yes. Ensure that the resource was created on or before the target date. *@

            FILTER(?creationDate <= "@timestamp"^^xsd:dateTime)

            @*

            If the resource was deleted on or before the target date, ignore it.

            *@
            FILTER NOT EXISTS {
                ?resource knora-base:deleteDate ?deleteDate .
                FILTER(?deleteDate <= "@timestamp"^^xsd:dateTime)
            }
        }

        case None => {
            @* This is not a version history request. Ensure that the resource is not marked as deleted. *@
            ?resource knora-base:isDeleted false .

            OPTIONAL {
                ?resource knora-base:lastModificationDate ?lastModificationDate .
            }
        }
    }

    GRAPH <http://www.ontotext.com/explicit> {
        ?resource a ?resourceType .
    }

    @* If this isn't a preview request, return the resource's values. *@
    @if(!preview) {
        @* There might be resources with no values. *@
        OPTIONAL {
            @* Is this a version history request? *@
            @maybeTimestamp match {
                case Some(timestamp) => {
                    @* Yes. Find the values that existed at the target date. *@

                    @* Get the current version of each value. *@
                    ?resource knora-base:hasValue ?currentValue .

                    @* If the value was deleted on or before the target date, ignore all its versions. *@
                    FILTER NOT EXISTS {
                        ?currentValue knora-base:deleteDate ?currentValueDeleteDate .
                        FILTER(?currentValueDeleteDate <= "@timestamp"^^xsd:dateTime)
                    }

                    @* In each value's history, find a version that was created on or before the target date. *@
                    ?currentValue knora-base:previousValue* ?valueObject .
                    ?valueObject knora-base:valueCreationDate ?valueObjectCreationDate .
                    FILTER(?valueObjectCreationDate <= "@timestamp"^^xsd:dateTime)

                    @*

                    If the value's history contains another version that was also created on or before
                    the target date, and is more recent than this one, ignore this one. This should leave at most
                    one version, which is the most recent version that was created on or before the target date.

                    *@
                    FILTER NOT EXISTS {
                        ?currentValue knora-base:previousValue* ?otherValueObject .
                        ?otherValueObject knora-base:valueCreationDate ?otherValueObjectCreationDate .

                        FILTER(
                            (?otherValueObjectCreationDate <= "@timestamp"^^xsd:dateTime) &&
                            (?otherValueObjectCreationDate > ?valueObjectCreationDate)
                        )
                    }
                }

                case None => {
                    @* This isn't a version history request. Return the current version of each value. *@

                    ?resource knora-base:hasValue ?valueObject .
                    ?valueObject knora-base:isDeleted false .
                }
            }

            {
                GRAPH <http://www.ontotext.com/explicit> {
                    ?resource ?resourceValueProperty ?valueObject .

                    ?valueObject a ?valueObjectType ;
                        ?valueObjectProperty ?valueObjectValue .
                }
            } UNION {
                GRAPH <http://www.ontotext.com/explicit> {
                    ?valueObject knora-base:valueHasStandoff ?standoffNode .
                    ?standoffNode ?standoffProperty ?standoffValue .
                }
            } UNION {
                 GRAPH <http://www.ontotext.com/explicit> {
                    ?valueObject a knora-base:ListValue .
                    ?valueObject knora-base:valueHasListNode  ?listNode .
                    ?listNode rdfs:label ?listNodeLabel .
                 }
            } UNION {
                @* If the value is a link value, get the referred resource. *@
                GRAPH <http://www.ontotext.com/explicit> {
                    ?valueObject a knora-base:LinkValue ;
                      rdf:predicate ?resourceLinkProperty ;
                      rdf:object ?referredResource .
                    ?referredResource a ?referredResourceType .
                }

                ?referredResource rdfs:label ?referredResourceLabel ;
                  knora-base:attachedToUser ?referredResourceCreator ;
                  knora-base:hasPermissions ?referredResourcePermissions ;
                  knora-base:attachedToProject ?referredResourceProject ;
                  knora-base:creationDate ?referredResourceCreationDate .

                @* Is this a version history request? *@
                @maybeTimestamp match {
                    case Some(timestamp) => {
                        @* Yes. If the referred resource was deleted on or before the target date, ignore it. *@
                        FILTER NOT EXISTS {
                            ?referredResource knora-base:deleteDate ?referredResourceDeleteDate .
                            FILTER(?referredResourceDeleteDate <= "@timestamp"^^xsd:dateTime)
                        }
                    }

                    case None => {
                        @* This is not a version history request. Ensure that the referred resource is not marked as deleted. *@
                        ?referredResource knora-base:isDeleted false .

                        OPTIONAL {
                            ?referredResource knora-base:lastModificationDate ?lastModificationDate .
                        }
                    }
                }
            }
        }
    }
}
