@*
 * Copyright Â© 2015-2019 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi._
@import org.knora.webapi.util.SmartIri

@*
 * Constructs a prequery that gets the IRIs of resources from the specified project.
 *
 * @param the name of the triplestore being used.
 * @param projectIri the IRI of the project.
 * @param resourceClassIri the IRI of the resource class.
 * @param maybeOrderByProperty the IRI of the property to order by.
 * @param maybeOrderByValuePredicate a predicate of a Knora value class, whose object will be used in ORDER BY.
 * @param offset the OFFSET to be used.
 * @param offset the LIMIT to be used.
 *@
@(triplestore: String,
  projectIri: IRI,
  resourceClassIri: SmartIri,
  maybeOrderByProperty: Option[SmartIri],
  maybeOrderByValuePredicate: Option[SmartIri],
  offset: Int,
  limit: Int)

@if(triplestore.startsWith("graphdb")) {
    @{
        queries.sparql.v2.txt.getResourcesInProjectPrequeryGraphDB(projectIri = projectIri,
                                                                   resourceClassIri = resourceClassIri,
                                                                   maybeOrderByProperty = maybeOrderByProperty,
                                                                   maybeOrderByValuePredicate = maybeOrderByValuePredicate,
                                                                   offset = offset,
                                                                   limit = limit)
    }
} else {
    @{
        queries.sparql.v2.txt.getResourcesInProjectPrequeryStandard(triplestore = triplestore,
                                                                    projectIri = projectIri,
                                                                    resourceClassIri = resourceClassIri,
                                                                    maybeOrderByProperty = maybeOrderByProperty,
                                                                    maybeOrderByValuePredicate = maybeOrderByValuePredicate,
                                                                    offset = offset,
                                                                    limit = limit)
    }
}
