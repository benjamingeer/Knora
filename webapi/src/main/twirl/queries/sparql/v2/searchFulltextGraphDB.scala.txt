@*
 * Copyright © 2015 Lukas Rosenthaler, Benjamin Geer, Ivan Subotic,
 * Tobias Schweizer, André Kilchenmann, and Sepideh Alassi.
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.SparqlGenerationException

@*
 * Performs a simple full-text search using GraphDB.
 *
 * This template is used only by searchFulltext.scala.txt.
 *
 * Since the triplestore type is GraphDB, we assume that inference is enabled, and we use it to optimise the generated
 * SPARQL. Specifically, we use inference to return search results matching subclasses of the resource class
 * specified by the user. This requires us to use GraphDB's GRAPH <http://www.ontotext.com/explicit> whenever
 * we need to get explicit (non-inferred) statements.
 *
 * @param searchTerms search terms.
 * @param separator the separator to be used in aggregation functions.
 *@
@(searchTerms: String,
  separator: Char)

PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?resource (GROUP_CONCAT(?valueObject; separator="@separator") AS ?valueObjectConcat) WHERE {

    {
        SELECT DISTINCT ?matchingSubject WHERE {

            GRAPH <http://www.ontotext.com/explicit> {
                ?matchingSubject ?matchingProperty ?literal .
            }

            ?literal <http://www.ontotext.com/owlim/lucene#fullTextSearchIndex> '@searchTerms' .
        }
    }

    OPTIONAL {
        ?matchingSubject a knora-base:Value .

        GRAPH <http://www.ontotext.com/explicit> {
            ?matchingSubject knora-base:isDeleted false .
            ?matchingSubject a ?valueObjectType .
        }

        FILTER(?valueObjectType != knora-base:LinkValue)

        ?containingResource knora-base:hasValue ?matchingSubject .

        # this variable will only be bound if the search matched a value object
        BIND(?matchingSubject AS ?valueObject)

    }

    # If the previous OPTIONAL clause was executed, ?matchingSubject is a value object, and ?containingResource will be set.
    # Otherwise, ?matchingSubject is a resource (its rdfs:label matched the search pattern).
    BIND(COALESCE(?containingResource, ?matchingSubject) AS ?resource)

    ?resource a knora-base:Resource ;
        knora-base:isDeleted false .

}
GROUP BY ?resource
ORDER BY ?resource
OFFSET 0
LIMIT 25