@*
 * Copyright Â© 2015-2019 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.SparqlGenerationException
@import org.knora.webapi.util.ApacheLuceneSupport.LuceneQueryString


@*
 * Performs a simple full-text search using standard SPARQL (except for the interface to Lucene, which is
 * triplestore-specific), and without inference.
 *
 * The number of rows returned per matching resource is equal to the number of values that matched in the resource,
 * plus one if the resource's label matched.
 *
 * This template is used only by searchFulltext.scala.txt.
 *
 * @param triplestore the name of the triplestore being used.
 * @param searchTerms search terms.
 * @param limitToProject limit search to the given project.
 * @param limitToResourceClass limit search to given resource class.
 * @param limitToStandoffClass limit the search to given standoff class.
 * @param separator the separator to be used in aggregation functions.
 * @param limit maximal amount of rows to be returned
 * @param offset offset for paging (starts with 0)
 * @param countQuery indicates whether it is a count query or the actual resources should be returned.
 *@
@(triplestore: String,
  searchTerms: LuceneQueryString,
  limitToProject: Option[IRI],
  limitToResourceClass: Option[IRI],
  limitToStandoffClass: Option[IRI],
  separator: Option[Char],
  limit: Int,
  offset: Int,
  countQuery: Boolean)

PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

@if(!countQuery) {
SELECT DISTINCT ?resource (GROUP_CONCAT(IF(BOUND(?valueObject), STR(?valueObject), ""); separator="@separator.getOrElse(throw SparqlGenerationException("Separator expected for non count query, but none given"))") AS ?valueObjectConcat)
} else {
    SELECT (count(distinct ?resource) as ?count)
}
WHERE {

    {
        SELECT DISTINCT ?matchingSubject WHERE {

            ?matchingSubject <http://jena.apache.org/text#query> '@searchTerms.getQueryString' .

            @* standoff search *@
            @if(limitToStandoffClass.nonEmpty) {

                # ?matchingSubject is expected to be a TextValue
                ?matchingSubject a knora-base:TextValue ;
                    knora-base:valueHasString ?literal ;
                    knora-base:valueHasStandoff ?standoffNode .

                ?standoffNode a <@limitToStandoffClass.get> ;
                    knora-base:standoffTagHasStart ?start ;
                    knora-base:standoffTagHasEnd ?end .

                # https://www.w3.org/TR/xpath-functions/#func-substring
                # The first character of a string is located at position 1, not position 0. -> standoff uses a 0 based index
                BIND(SUBSTR(?literal, ?start+1, ?end - ?start) AS ?markedup)

                @* Loop over search terms and make sure they are all contained in the specified standoff markup *@
                @for(term <- searchTerms.getSingleTerms) {
                    @* TODO: Ignore Lucene operators *@
                    FILTER REGEX(?markedup, '@term', "i")
                }

             }
        }
    }

    OPTIONAL {
        ?matchingSubject a ?valueObjectType ;
            knora-base:isDeleted false .

        ?valueObjectType rdfs:subClassOf *knora-base:Value .

        FILTER(?valueObjectType != knora-base:LinkValue && ?valueObjectType != knora-base:ListValue)

        ?containingResource ?property ?matchingSubject .

        ?property rdfs:subPropertyOf* knora-base:hasValue .

        # this variable will only be bound if the search matched a value object
        BIND(?matchingSubject AS ?valueObject)
    }

    # If the previous OPTIONAL clause was executed, ?matchingSubject is a value object, and ?containingResource will be set.
    # Otherwise, ?matchingSubject is a resource (its rdfs:label matched the search pattern).
    BIND(COALESCE(?containingResource, ?matchingSubject) AS ?resource)

    ?resource a ?resourceClass ;
        knora-base:isDeleted false .

    ?resourceClass rdfs:subClassOf* knora-base:Resource .

    @limitToResourceClass match {
        case Some(definedLimitToResourceClass) => {
            ?resourceClass rdfs:subClassOf* <@definedLimitToResourceClass> .
        }

        case None => {}
    }

    @limitToProject match {
        case Some(definedLimitToProject) => {
            ?resource knora-base:attachedToProject <@definedLimitToProject> .
        }

        case None => {}
    }
}
@if(!countQuery) {
GROUP BY ?resource
ORDER BY ?resource
OFFSET @offset
}
LIMIT @limit
