@*
 * Copyright Â© 2021 - 2024 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi._
@import org.knora.webapi.messages.SmartIri
@import org.knora.webapi.messages.v2.responder.ontologymessages._
@import org.knora.webapi.messages.v2.responder.ontologymessages.OwlCardinality._
@import java.time.Instant

@*
 * Replace's a class's cardinalities with new ones.
 *
 * @param ontologyNamedGraphIri the IRI of the named graph where the ontology is stored.
 * @param ontologyIri the IRI of the ontology containing the class.
 * @param classIri the IRI of the class to be updated.
 * @param newCardinalities the class's new cardinalities.
 * @param lastModificationDate the xsd:dateTimeStamp that was attached to the ontology when it was last modified.
 * @param currentTime an xsd:dateTimeStamp that will be attached to the ontology.
 *@
@(ontologyNamedGraphIri: SmartIri,
  ontologyIri: SmartIri,
  classIri: SmartIri,
  newCardinalities: Map[SmartIri, KnoraCardinalityInfo],
  lastModificationDate: Instant,
  currentTime: Instant)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>
PREFIX salsah-gui: <http://www.knora.org/ontology/salsah-gui#>

@* Delete the existing cardinalities and insert the new ones in separate update operations,
   because the WHERE clause for deleting the existing ones returns several solutions.
   If the INSERT was done in the same update, it would be run once for each solution,
   which would cause redundant blank nodes to be inserted. *@

DELETE {
    GRAPH <@ontologyNamedGraphIri> {
        <@classIri> rdfs:subClassOf ?restriction .
        ?restriction ?restrictionPred ?restrictionObj .
    }
}

WHERE {
    GRAPH <@ontologyNamedGraphIri> {
        <@ontologyIri> rdf:type owl:Ontology ;
            knora-base:lastModificationDate "@lastModificationDate"^^xsd:dateTime .

        <@classIri> rdf:type owl:Class .

        OPTIONAL {
            <@classIri> rdfs:subClassOf ?restriction .
            FILTER isBlank(?restriction)
            ?restriction rdf:type owl:Restriction ;
                ?restrictionPred ?restrictionObj .
        }
    }
};
INSERT {
    GRAPH <@ontologyNamedGraphIri> {
        @for((propertyIri, knoraCardinality) <- newCardinalities) {

            @defining(OwlCardinality.knoraCardinality2OwlCardinality(knoraCardinality)) { owlCardinalityInfo =>

                <@classIri> rdfs:subClassOf [ rdf:type owl:Restriction ;
                    owl:onProperty <@propertyIri> ;

                    @owlCardinalityInfo.guiOrder match {
                       case Some(guiOrder) => {
                           salsah-gui:guiOrder "@guiOrder"^^xsd:nonNegativeInteger ;
                       }

                       case None => {}
                    }

                    <@owlCardinalityInfo.owlCardinalityIri> "@owlCardinalityInfo.owlCardinalityValue"^^xsd:nonNegativeInteger ] .

            }
        }
    }
}

WHERE {
    GRAPH <@ontologyNamedGraphIri> {
        <@ontologyIri> rdf:type owl:Ontology ;
            knora-base:lastModificationDate "@lastModificationDate"^^xsd:dateTime .

        <@classIri> rdf:type owl:Class .
    }
};
DELETE {
    GRAPH <@ontologyNamedGraphIri> {
        <@ontologyIri> knora-base:lastModificationDate "@lastModificationDate"^^xsd:dateTime .
    }
} INSERT {
    GRAPH <@ontologyNamedGraphIri> {
        <@ontologyIri> knora-base:lastModificationDate "@currentTime"^^xsd:dateTime .
    }
}

WHERE {
    GRAPH <@ontologyNamedGraphIri> {
        <@ontologyIri> rdf:type owl:Ontology ;
            knora-base:lastModificationDate "@lastModificationDate"^^xsd:dateTime .
    }
}
