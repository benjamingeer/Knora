@*
 * Copyright Â© 2021 - 2022 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI

@**
 * Gets the values of all the Knora properties of a resource that have values, using GraphDB.
 *
 * This template is used only by getResourcePropertiesAndValues.scala.txt.
 *
 * Since the triplestore type is GraphDB, we assume that inference is enabled, and we use it to optimise the generated
 * SPARQL. Specifically, we use inference to return search results matching subproperties of Knora base properties
 * such as knora-base:hasValue. This requires us to use GraphDB's GRAPH <http://www.ontotext.com/explicit>
 * whenever we need to get explicit (non-inferred) statements.
 *
 * @param resourceIri the IRI of the resource to be queried.
 *@
@(resourceIri: IRI)

prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix knora-base: <http://www.knora.org/ontology/knora-base#>

SELECT ?prop ?isLinkProp ?isLinkValueProp ?obj ?objPred ?objObj ?predStandoff ?objStandoff
WHERE {
    BIND(IRI("@resourceIri") as ?resource)

    ?resource rdf:type knora-base:Resource ;
        knora-base:isDeleted false ;
        knora-base:attachedToProject ?resourceProject .

    {
        @* Get properties that point to Value objects. *@
        ?resource knora-base:hasValue ?obj .

        @* Exclude FileValue objects, because if the resource is a representation, we get its file values with its resource info. *@
        FILTER NOT EXISTS {
            ?resource knora-base:hasFileValue ?obj .
        }

        @* Identify properties that point to LinkValue objects. *@
        OPTIONAL {
            ?resource knora-base:hasLinkToValue ?obj .

            BIND(true as ?isLinkValueProp)
        }

        GRAPH <http://www.ontotext.com/explicit> {
            ?resource ?prop ?obj .
        }

        {
            @* Get the project of the containing resource. *@

            ?obj knora-base:isDeleted false .
            ?resource knora-base:attachedToProject ?resourceProject .
            BIND(knora-base:attachedToProject AS ?objPred)
        	BIND(?resourceProject AS ?objObj)
        }
        UNION
        {
            @* Get the value's standoff markup nodes if it has any. *@

            ?obj knora-base:isDeleted false .
            ?obj a knora-base:TextValue .
            BIND(knora-base:valueHasStandoff AS ?objPred)

            GRAPH <http://www.ontotext.com/explicit> {
                ?obj ?objPred ?objObj .
                ?objObj ?predStandoff ?objStandoff .
            }
        }
        UNION
        {
            @* Get any other statements about the value. *@

            ?obj knora-base:isDeleted false .

            GRAPH <http://www.ontotext.com/explicit> {
                ?obj ?objPred ?objObj .
            }

            FILTER(?objPred != knora-base:valueHasStandoff)
        }
    }
    UNION
    {
        @* Get link properties, i.e. properties that point to other Resource objects. *@

        ?resource knora-base:hasLinkTo ?obj .

        GRAPH <http://www.ontotext.com/explicit> {
            ?resource ?prop ?obj .
            ?obj knora-base:isDeleted false .
            ?obj ?objPred ?objObj .
        }

        BIND(true AS ?isLinkProp)
    }
}
