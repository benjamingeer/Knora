@*
 * Copyright Â© 2021 - 2023 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi._
@import dsp.errors.SparqlGenerationException
@import org.knora.webapi.messages.twirl.SparqlTemplateLinkUpdate

@**
 * Generates statements to be added to the WHERE clause of a SPARQL update when creating a new link between resources.
 * This template is used only when creating a single link in an existing resource.
 *
 * @param resourceIri the resource that is the source of the link.
 * @param linkUpdate a [[LinkUpdate]] object describing the link to insert.
 *
 * The SPARQL variable `?resourceClass` (the OWL class of the link source) must already be bound.
 *@
@(resourceIri: IRI,
  linkUpdate: SparqlTemplateLinkUpdate)

    # Value: @linkUpdate.newLinkValueIri
    # Property: @linkUpdate.linkPropertyIri

    BIND(IRI("@linkUpdate.linkPropertyIri") AS ?linkProperty)
    BIND(IRI("@{linkUpdate.linkPropertyIri}Value") AS ?linkValueProperty)
    BIND(IRI("@linkUpdate.newLinkValueIri") AS ?newLinkValue)
    BIND(IRI("@linkUpdate.linkTargetIri") AS ?linkTarget)

  @if(linkUpdate.linkTargetExists) {
  
        @* Make sure the link target is a knora-base:Resource. *@

        ?linkTarget rdf:type ?linkTargetClass .
        ?linkTargetClass rdfs:subClassOf* knora-base:Resource .

        @* Do nothing if the target resource belongs to the wrong OWL class. *@

        ?linkProperty knora-base:objectClassConstraint ?expectedTargetClass .
        ?linkTargetClass rdfs:subClassOf* ?expectedTargetClass .

        @* Do nothing if the target resource doesn't exist or is marked as deleted. *@

        ?linkTarget knora-base:isDeleted false .

        @* Do nothing if the source resource's OWL class has no cardinality for the link property. *@
        ?resourceClass rdfs:subClassOf* ?restriction .
        ?restriction a owl:Restriction .
        ?restriction owl:onProperty ?linkProperty .

    }

    @if(linkUpdate.directLinkExists) {
        @{throw SparqlGenerationException("linkUpdate.directLinkExists must be false in this SPARQL template"); ()}
    }

    @if(linkUpdate.linkValueExists) {
        @{throw SparqlGenerationException("linkUpdate.linkValueExists must be false in this SPARQL template"); ()}
    }

    @*

    Bind a variable for knora-base:valueHasOrder for the new value.

    We have to do a subquery to determine the next available knora-base:valueHasOrder. This works as follows: if the
    property already has one or more (non-deleted) values in the resource, find the one with the highest order, add 1
    to its order, and give the resulting order to the new value. Otherwise, give the new value an order of 0.

    *@

    {
        SELECT ((MAX(?order)) AS ?maxOrder) (IF(BOUND(?maxOrder), ?maxOrder + 1, 0) AS ?nextOrder)
        WHERE {
            <@resourceIri> <@{linkUpdate.linkPropertyIri}Value> ?otherLinkValue .
            ?otherLinkValue knora-base:valueHasOrder ?order ;
                knora-base:isDeleted false .
        }
    }
