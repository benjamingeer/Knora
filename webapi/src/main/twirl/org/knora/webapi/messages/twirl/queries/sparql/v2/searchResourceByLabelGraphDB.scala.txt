@*
 * Copyright Â© 2021 Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.exceptions.SparqlGenerationException
@import org.knora.webapi.util.ApacheLuceneSupport.MatchStringWhileTyping

@*
 * Performs a search for resources by their label.
 *
 * @param searchTerm search terms.
 * @param limitToProject limit search to the given project.
 * @param limitToResourceClass limit search to given resource class.
 * @param limit maximum amount of resources to be returned.
 * @param offset offset to be used for paging.
 * @param countQuery indicates whether it is a count query or the actual resources should be returned.
 *@
@(searchTerm: MatchStringWhileTyping,
  limitToProject: Option[IRI],
  limitToResourceClass: Option[IRI],
  limit: Int,
  offset: Int,
  countQuery: Boolean)

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

@if(!countQuery) {
    CONSTRUCT {
        ?resource rdfs:label ?label ;
            a knora-base:Resource ;
            knora-base:isMainResource true ;
            knora-base:isDeleted false ;
            a ?resourceType ;
            knora-base:attachedToUser ?resourceCreator ;
            knora-base:hasPermissions ?resourcePermissions ;
            knora-base:attachedToProject ?resourceProject  ;
            knora-base:creationDate ?creationDate ;
            knora-base:lastModificationDate ?lastModificationDate .

        # include this inferred information in the results, needed to identify value properties
        ?resource knora-base:hasValue ?valueObject ;
            ?resourceValueProperty ?valueObject .
        ?valueObject ?valueObjectProperty ?valueObjectValue .

    } WHERE {
        {
            @{
                org.knora.webapi.messages.twirl.queries.sparql.v2.txt.searchResourceByLabelSubQuerySelectGraphDB(
                    searchTerm = searchTerm,
                    limitToProject = limitToProject,
                    limitToResourceClass = limitToResourceClass,
                    limit = limit,
                    offset = offset,
                    countQuery = countQuery)
            }
        }

        {
            GRAPH <http://www.ontotext.com/explicit> {
                ?resource a ?resourceType .
            }

            ?resource knora-base:attachedToUser ?resourceCreator ;
                knora-base:hasPermissions ?resourcePermissions ;
                knora-base:attachedToProject ?resourceProject ;
                knora-base:creationDate ?creationDate ;
                rdfs:label ?label .

            OPTIONAL {
                ?resource knora-base:lastModificationDate ?lastModificationDate .
            }
        }
        # there might be resources that have neither values nor links
        UNION {
            ?resource knora-base:hasValue ?valueObject .
            ?valueObject a knora-base:Value .

            GRAPH <http://www.ontotext.com/explicit> {
                ?resource ?resourceValueProperty ?valueObject .

                ?valueObject knora-base:isDeleted false ;
                    a ?valueObjectType ;
                    ?valueObjectProperty ?valueObjectValue .
            }

            FILTER(?valueObjectType != knora-base:LinkValue)

            FILTER NOT EXISTS {
                ?valueObjectValue a knora-base:StandoffTag .
            }
        }
    }
} else {
    @{
        org.knora.webapi.messages.twirl.queries.sparql.v2.txt.searchResourceByLabelSubQuerySelectGraphDB(
            searchTerm = searchTerm,
            limitToProject = limitToProject,
            limitToResourceClass = limitToResourceClass,
            limit = limit,
            offset = offset,
            countQuery = countQuery)
    }
}
