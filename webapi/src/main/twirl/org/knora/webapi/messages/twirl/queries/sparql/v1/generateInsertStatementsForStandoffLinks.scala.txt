@*
 * Copyright Â© 2021 - 2023 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import java.time.Instant
@import java.util.UUID
@import dsp.valueobjects.UuidUtil
@import org.knora.webapi._
@import org.knora.webapi.messages.twirl.SparqlTemplateLinkUpdate
@import org.knora.webapi.messages.v1.responder.valuemessages._

@**
 * Generates statements to be added to the INSERT clause of a SPARQL update to insert direct links and LinkValues
 * for Standoff resource references, when creating new values (as opposed to new versions of existing values).
 * This template is used in two contexts: when creating a single text value in an existing resource, and when
 * creating a new resource with its initial values.
 *
 * @param the IRI of the resource in which values are being created.
 * @param linkUpdates a list of [[LinkUpdate]] objects describing links and LinkValues that need to be
 *        updated for resource references in Standoff text values.
 * @param creationDate an xsd:dateTimeStamp to be attached to the link values.
 *@
@(resourceIri: IRI,
  linkUpdates: Seq[SparqlTemplateLinkUpdate],
  creationDate: Instant)

        @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
            @* Insert a direct link for the resource reference if necessary. *@
            @if(linkUpdate.insertDirectLink) {
                <@resourceIri> <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }

            @* Insert a LinkValue for the resource reference. *@
            <@linkUpdate.newLinkValueIri> rdf:type knora-base:LinkValue ;
                rdf:subject <@resourceIri> ;
                rdf:predicate <@linkUpdate.linkPropertyIri> ;
                rdf:object <@linkUpdate.linkTargetIri> ;
                knora-base:valueHasString "@linkUpdate.linkTargetIri" ;
                knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
                knora-base:isDeleted false ;
                knora-base:valueCreationDate "@creationDate"^^xsd:dateTime .

            <@linkUpdate.newLinkValueIri> knora-base:attachedToUser <@linkUpdate.newLinkValueCreator> ;
                knora-base:hasPermissions "@linkUpdate.newLinkValuePermissions" .

            @*

            If this template is being used to create a single text value containing standoff links, the new LinkValue
            we are creating may be a new version of an existing LinkValue (linkUpdate.linkValueExists will be true).
            In that case, the WHERE clause will have already bound a SPARQL variable ?linkValue@linkValueIndex,
            containing the IRI of the existing LinkValue. Therefore, add a triple indicating that the new LinkValue
            is a new version of the existing one, and copy the UUID from the existing one.

            If this template is being used to create a new resource with its initial values, there won't be any existing
            LinkValues for standoff links, so linkUpdate.linkValueExists will be false. Generate a random UUID for the
            LinkValue.

            *@
            @if(linkUpdate.linkValueExists) {
                <@linkUpdate.newLinkValueIri> knora-base:previousValue ?linkValue@linkValueIndex ;
                    knora-base:valueHasUUID ?linkValueUUID@linkValueIndex .
            } else {
                <@linkUpdate.newLinkValueIri> knora-base:valueHasUUID "@{UuidUtil.base64Encode(UUID.randomUUID)}" .
            }

            @* Attach the new LinkValue to its containing resource. *@
            <@resourceIri> <@{linkUpdate.linkPropertyIri}Value> <@linkUpdate.newLinkValueIri> .
        }
