@*
 * Copyright Â© 2021 - 2023 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import java.time.Instant
@import java.util.UUID
@import dsp.valueobjects.UuidUtil
@import org.knora.webapi.IRI
@import org.knora.webapi.messages.SmartIri
@import org.knora.webapi.messages.twirl.SparqlTemplateLinkUpdate
@import org.knora.webapi.messages.v2.responder.valuemessages._

@**
 * Inserts a new version of an existing value of a resource property.
 *
 * @param dataNamedGraph the named graph to update.
 * @param resourceIri the resource to update.
 * @param propertyIri the IRI of the property that points from the resource to the value.
 * @param currentValueIri the most recent existing version of the value.
 * @param newValueIri the new value IRI.
 * @param valueTypeIri the type of the new value.
 * @param permissionRelevantAssertions Permission-relevant assertions, i.e. owner and project plus permissions, in
 *        the form of a list of tuples (predicate, object).
 * @param value the value to insert.
 * @param an optional comment on the new value.
 * @param linkUpdates a list of [[SparqlTemplateLinkUpdate]] objects describing links and LinkValues that need to be
 *        updated for resource references in standoff markup.
 * @param currentTime an xsd:dateTimeStamp that will be attached to the resources.
 * @param requestingUser the IRI of the user making the request.
 *
 * This operation will do nothing if `currentValueIri` is not in fact the most recent version, if `valueTypeIri` is
 * the wrong type for the property, or if the resource or the current value are nonexistent or marked as deleted. To
 * find out whether the operation succeeded, the application must query the property's version history.
 *@
@(dataNamedGraph: IRI,
  resourceIri: IRI,
  propertyIri: SmartIri,
  currentValueIri: IRI,
  newValueIri: IRI,
  valueTypeIri: SmartIri,
  value: ValueContentV2,
  valueCreator: IRI,
  valuePermissions: String,
  maybeComment: Option[String],
  linkUpdates: Seq[SparqlTemplateLinkUpdate],
  currentTime: Instant,
  requestingUser: IRI)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

DELETE {
    GRAPH ?dataNamedGraph {
        @* Detach the current version of the value from the resource. *@
        ?resource ?property ?currentValue .

        @* Delete the resource's last modification date so we can update it. *@
        ?resource knora-base:lastModificationDate ?resourceLastModificationDate .

        @* Delete the UUID from the current version of the value, because the new version will store it. *@
        ?currentValue knora-base:valueHasUUID ?currentValueUUID .

        @* Delete the permissions from the current version of the value, because the new version will store them. *@
        ?currentValue knora-base:hasPermissions ?currentValuePermissions .

        @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
            @* Delete direct links for resource references that no longer exist. *@
            @if(linkUpdate.deleteDirectLink) {
                ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }

            @* If any LinkValues need to be updated, detach them from the resource. *@
            @if(linkUpdate.linkValueExists) {
                ?resource <@{linkUpdate.linkPropertyIri}Value> ?linkValue@linkValueIndex .

                @* Delete the UUID from the current version of the link value, because the new version will store it. *@
                ?linkValue@linkValueIndex knora-base:valueHasUUID ?linkValueUUID@linkValueIndex .

                @* Delete the permissions from the current version of the link value, because the new version will store them. *@
                ?linkValue@linkValueIndex knora-base:hasPermissions ?linkValuePermissions@linkValueIndex .
           }
        }
    }
} INSERT {
    GRAPH ?dataNamedGraph {
        @* Construct the new value version. *@
        ?newValue rdf:type <@value.valueType> ;
            knora-base:isDeleted false  ;
            knora-base:valueHasString """@value.valueHasString""" ;
            knora-base:valueHasUUID ?currentValueUUID .

        @{
            org.knora.webapi.messages.twirl.queries.sparql.v2.txt.generateInsertStatementsForValueContent(value = value,
                                                                          newValueIri = newValueIri)
        }

        @* Insert the value's comment, if given. *@
        @value.comment match {
            case Some(commentStr) => {
                ?newValue knora-base:valueHasComment """@commentStr""" .
            }

            case None => {}
        }

        ?newValue knora-base:attachedToUser <@valueCreator> ;
            knora-base:hasPermissions "@valuePermissions"^^xsd:string  .

        @* TODO: in case of a file value, order is not given *@
        ?newValue knora-base:valueHasOrder ?order .
        ?newValue knora-base:valueCreationDate "@currentTime"^^xsd:dateTime .
        ?newValue knora-base:previousValue ?currentValue .

        @* Insert direct links and LinkValues for resource references. *@

        @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
            @* Insert a direct link for the resource reference if necessary. *@
            @if(linkUpdate.insertDirectLink) {
                ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }

            @* Insert a LinkValue for the resource reference. *@
            <@linkUpdate.newLinkValueIri> rdf:type knora-base:LinkValue ;
                rdf:subject ?resource ;
                rdf:predicate <@linkUpdate.linkPropertyIri> ;
                rdf:object <@linkUpdate.linkTargetIri> ;
                knora-base:valueHasString "@linkUpdate.linkTargetIri" ;
                knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
                @if(linkUpdate.newReferenceCount == 0) {
                    knora-base:isDeleted true ;
                    knora-base:deleteDate "@currentTime"^^xsd:dateTime ;
                    knora-base:deletedBy <@requestingUser> ;
                } else {
                    knora-base:isDeleted false ;
                }
                knora-base:valueCreationDate "@currentTime"^^xsd:dateTime .

            <@linkUpdate.newLinkValueIri> knora-base:attachedToUser <@linkUpdate.newLinkValueCreator> ;
                knora-base:hasPermissions "@linkUpdate.newLinkValuePermissions" .

            @*

               If we're inserting a new version of an existing LinkValue, attach it to the previous version,
               and use the previous version's UUID. Otherwise, make a random UUID.

            *@
            @if(linkUpdate.linkValueExists) {
                <@linkUpdate.newLinkValueIri> knora-base:previousValue ?linkValue@linkValueIndex ;
                    knora-base:valueHasUUID ?linkValueUUID@linkValueIndex .
            } else {
                <@linkUpdate.newLinkValueIri> knora-base:valueHasUUID "@{UuidUtil.base64Encode(UUID.randomUUID)}" .
            }

            @* Attach the new LinkValue to its containing resource. *@
            ?resource <@{linkUpdate.linkPropertyIri}Value> <@linkUpdate.newLinkValueIri> .
        }

        @* Attach the value to the resource. *@
        ?resource ?property ?newValue .

        @* Update the resource's last modification date. *@
        ?resource knora-base:lastModificationDate "@currentTime"^^xsd:dateTime .
    }
}

WHERE {
    BIND(IRI("@dataNamedGraph") AS ?dataNamedGraph)
    BIND(IRI("@resourceIri") AS ?resource)
    BIND(IRI("@propertyIri") AS ?property)
    BIND(IRI("@currentValueIri") AS ?currentValue)
    BIND(IRI("@newValueIri") AS ?newValue)
    BIND(IRI("@valueTypeIri") AS ?valueType)

    ?resource ?property ?currentValue .
    ?currentValue rdf:type ?valueType .
    ?property knora-base:objectClassConstraint ?valueType .

    @*

        Consider order if given (not given for file values)

    *@

    OPTIONAL {
        ?currentValue knora-base:valueHasOrder ?order .
    }

    @*

    Do nothing if the resource isn't actually a resource.

    *@

    ?resource rdf:type ?resourceClass .
    ?resourceClass rdfs:subClassOf* knora-base:Resource .

    @* Do nothing if the resource is marked as deleted. *@

    ?resource knora-base:isDeleted false .

    @* Don't add a new version of a deleted value. *@

    ?currentValue knora-base:isDeleted false ;
        knora-base:valueHasUUID ?currentValueUUID ;
        knora-base:hasPermissions ?currentValuePermissions .

    @* If this is a list value, make sure the list node that it points to exists and is a ListNode. *@

    @value match {

        case listValue: HierarchicalListValueContentV2 => {

            <@{listValue.valueHasListNode}> a knora-base:ListNode .

        }

        case _ => {}

    }

    @*

    Check the state of any LinkValues to be updated for resource references.

    *@

    @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
        @if(linkUpdate.insertDirectLink) {
            @*

            Do nothing if we were asked to insert a direct link to a target that doesn't exist, is marked as deleted,
            isn't a knora-base:Resource, or belongs to the wrong OWL class for the link property.

            *@

            <@linkUpdate.linkTargetIri> rdf:type ?linkTargetClass@linkValueIndex .
            <@linkUpdate.linkTargetIri> knora-base:isDeleted false .

            ?linkTargetClass@linkValueIndex rdfs:subClassOf* knora-base:Resource .
            <@linkUpdate.linkPropertyIri> knora-base:objectClassConstraint ?expectedTargetClass@linkValueIndex .
            ?linkTargetClass@linkValueIndex rdfs:subClassOf* ?expectedTargetClass@linkValueIndex .
        }

        @if(linkUpdate.directLinkExists) {
            @* Make sure the relevant direct link exists between the two resources. *@
            ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
        } else {
            @* Make sure there no such direct link. *@
            MINUS {
                ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }
        }

        @if(linkUpdate.linkValueExists) {
            @*

            Make sure a knora-base:LinkValue exists, describing the relevant direct link
            between the source and target resources, and has the correct reference count.

            *@
            ?resource <@{linkUpdate.linkPropertyIri}Value> ?linkValue@linkValueIndex .
            ?linkValue@linkValueIndex rdf:type knora-base:LinkValue ;
                rdf:subject ?resource ;
                rdf:predicate <@linkUpdate.linkPropertyIri> ;
                rdf:object <@linkUpdate.linkTargetIri> ;
                knora-base:valueHasRefCount @linkUpdate.currentReferenceCount ;
                knora-base:isDeleted false ;
                knora-base:valueHasUUID ?linkValueUUID@linkValueIndex ;
                knora-base:hasPermissions ?linkValuePermissions@linkValueIndex .
        } else {
            @* Make sure there is no such knora-base:LinkValue. *@
            MINUS {
                ?resource <@{linkUpdate.linkPropertyIri}Value> ?linkValue@linkValueIndex .
                ?linkValue@linkValueIndex rdf:type knora-base:LinkValue ;
                    rdf:subject ?resource ;
                    rdf:predicate <@linkUpdate.linkPropertyIri> ;
                    rdf:object <@linkUpdate.linkTargetIri> ;
                    knora-base:isDeleted false .
            }
        }
    }

    @* Get the resource's last modification date, if it has one, so we can update it. *@

    OPTIONAL {
        ?resource knora-base:lastModificationDate ?resourceLastModificationDate .
    }
}
