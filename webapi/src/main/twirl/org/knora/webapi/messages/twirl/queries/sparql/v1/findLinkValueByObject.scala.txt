@*
 * Copyright Â© 2021 - 2022 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI

@**
 * Looks for a `knora-base:LinkValue` describing a direct link between two resources, returns all information
 * about it, and checks whether the direct link also exists.
 *
 * @param triplestore the name of the triplestore being used.
 * @param subjectIri the IRI of the resource that is the source of the link.
 * @param predicateIri the IRI of the property that links the two resources.
 * @param maybeObjectIri if provided, the IRI of the resource that is the target of the link.
 * @param linkValueIri if provided, the IRI of the `LinkValue`.
 * @param includeDeleted if true, a `LinkValue` will be returned even if it is deleted. Currently this is
 *                       only for testing purposes.
 *@
@(triplestore: String,
  subjectIri: IRI,
  predicateIri: IRI,
  objectIri: IRI,
  includeDeleted: Boolean = false)

prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix knora-base: <http://www.knora.org/ontology/knora-base#>

SELECT ?linkValue ?directLinkExists ?targetResourceClass ?objPred ?objObj
@* Ensure that inference is not used in this query. *@
@if(triplestore.startsWith("graphdb")) {
    FROM <http://www.ontotext.com/explicit>
}
WHERE {
    <@subjectIri> <@{predicateIri}Value> ?linkValue .

    ?linkValue rdf:type knora-base:LinkValue ;
        rdf:subject <@subjectIri> ;
        rdf:predicate <@predicateIri> ;
        rdf:object <@objectIri> .

    @if(!includeDeleted) {
        FILTER NOT EXISTS {
            ?linkValue knora-base:isDeleted true ;
        }
    }

    OPTIONAL {
        <@subjectIri> <@predicateIri> <@objectIri> .
        <@objectIri> rdf:type ?targetResourceClass .
        BIND(true AS ?directLinkExists)
    }

    {
        ?linkValue ?objPred ?objObj .

        FILTER(?objPred != knora-base:attachedToProject)
    }
    UNION
    {
        @* Return the project of the resource that contains the value. *@

        <@subjectIri> knora-base:attachedToProject ?resourceProject .

        BIND(knora-base:attachedToProject AS ?objPred)
        BIND(?resourceProject AS ?objObj)
    }
}
