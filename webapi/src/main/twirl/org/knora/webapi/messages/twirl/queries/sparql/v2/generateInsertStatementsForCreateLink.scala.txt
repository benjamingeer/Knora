@*
 * Copyright Â© 2021 - 2023 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import java.time.Instant
@import java.util.UUID
@import org.knora.webapi._
@import dsp.errors.SparqlGenerationException
@import dsp.valueobjects.UuidUtil
@import org.knora.webapi.messages.twirl.SparqlTemplateLinkUpdate
@import org.knora.webapi.messages.v1.responder.valuemessages._

@**
 * Generates statements to be added to the INSERT clause of a SPARQL update when creating a new link between resources.
 * This template is used in two contexts: when creating a single link in an existing resource, and when creating
 * a new resource with its initial values.
 *
 * @param resourceIri     the IRI of the resource.
 * @param linkUpdate a [[LinkUpdate]] object describing the link to insert.
 * @param creationDate an xsd:dateTimeStamp that will be attached to the link value.
 * @param newValueUUID the UUID to be attached to the value.
 * @param maybeComment an optional comment on the link.
 * @param the knora-base:valueHasOrder of the new value. If not provided, the SPARQL variable ?nextOrder will be used.
 *@
@(resourceIri: IRI,
  linkUpdate: SparqlTemplateLinkUpdate,
  creationDate: Instant,
  newValueUUID: UUID,
  maybeComment: Option[String],
  maybeValueHasOrder: Option[Int])

        # Value: @linkUpdate.newLinkValueIri
        # Property: @linkUpdate.linkPropertyIri

        @* Insert a direct link between the source and target resources. *@
        @if(linkUpdate.insertDirectLink) {
            <@resourceIri> <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
        } else {
            @{throw SparqlGenerationException(s"LinkUpdate.insertDirectLink must be true in this SPARQL template (for value @index)"); ()}
        }

        @* Insert a LinkValue describing the link. *@
        <@linkUpdate.newLinkValueIri> rdf:type knora-base:LinkValue ;
            rdf:subject <@resourceIri> ;
            rdf:predicate <@linkUpdate.linkPropertyIri> ;
            rdf:object <@linkUpdate.linkTargetIri> ;
            knora-base:valueHasString "@linkUpdate.linkTargetIri"^^xsd:string ;
            knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
            @maybeComment match {
                case Some(comment) => {
                    knora-base:valueHasComment """@comment""" ;
                }

                case None => {}
            }
            @maybeValueHasOrder match {
                case Some(order) => {
                    knora-base:valueHasOrder @order ;
                }

                case None => {
                    knora-base:valueHasOrder ?nextOrder ;
                }
            }
            knora-base:isDeleted false ;
            knora-base:valueHasUUID "@{UuidUtil.base64Encode(newValueUUID)}" ;
            knora-base:valueCreationDate "@creationDate"^^xsd:dateTime ;
            knora-base:attachedToUser <@linkUpdate.newLinkValueCreator> ;
            knora-base:hasPermissions "@linkUpdate.newLinkValuePermissions"^^xsd:string .

        @* Attach the new LinkValue to its containing resource. *@
        <@resourceIri> <@{linkUpdate.linkPropertyIri}Value> <@linkUpdate.newLinkValueIri> .
