@*
 * Copyright Â© 2021 - 2024 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import java.time.Instant
@import org.knora.webapi.IRI
@import org.knora.webapi.messages.v2.responder.valuemessages._
@import org.knora.webapi.responders.v2.resources.SparqlTemplateResourceToCreate
@import org.knora.webapi.messages.twirl.SparqlTemplateLinkUpdate
@import dsp.valueobjects.UuidUtil
@import java.util.UUID

@**
 * Creates new resources.
 *
 * @param dataNamedGraph    the named graph in which the project stores its data.
 * @param resourcesToCreate a collection of resources to be created.
 * @param projectIri        the IRI of the project in which the resources are to be created.
 * @param creatorIri        the IRI of the creator of the resources.
 *@
@(dataNamedGraph: IRI,
  resourceToCreate: SparqlTemplateResourceToCreate,
  projectIri: IRI,
  creatorIri: IRI,
  linkUpdates: Seq[SparqlTemplateLinkUpdate],
  creationDate: Instant)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

INSERT DATA {
    GRAPH <@dataNamedGraph> {
        <@resourceToCreate.resourceIri> rdf:type <@resourceToCreate.resourceClassIri> ;
            knora-base:isDeleted false ;
            knora-base:attachedToUser <@creatorIri> ;
            knora-base:attachedToProject <@projectIri> ;
            rdfs:label """@resourceToCreate.resourceLabel""" ;
            knora-base:hasPermissions "@resourceToCreate.permissions" ;
            knora-base:creationDate "@resourceToCreate.resourceCreationDate"^^xsd:dateTime .

        @resourceToCreate.sparqlForValues

        @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
            @* Insert a direct link for the resource reference if necessary. *@
            @if(linkUpdate.insertDirectLink) {
                <@resourceToCreate.resourceIri> <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }

            @* Insert a LinkValue for the resource reference. *@
            <@linkUpdate.newLinkValueIri> rdf:type knora-base:LinkValue ;
                rdf:subject <@resourceToCreate.resourceIri> ;
                rdf:predicate <@linkUpdate.linkPropertyIri> ;
                rdf:object <@linkUpdate.linkTargetIri> ;
                knora-base:valueHasString "@linkUpdate.linkTargetIri" ;
                knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
                knora-base:isDeleted false ;
                knora-base:valueCreationDate "@creationDate"^^xsd:dateTime .

            <@linkUpdate.newLinkValueIri> knora-base:attachedToUser <@linkUpdate.newLinkValueCreator> ;
                knora-base:hasPermissions "@linkUpdate.newLinkValuePermissions" .

            @*

            If this template is being used to create a single text value containing standoff links, the new LinkValue
            we are creating may be a new version of an existing LinkValue (linkUpdate.linkValueExists will be true).
            In that case, the WHERE clause will have already bound a SPARQL variable ?linkValue@linkValueIndex,
            containing the IRI of the existing LinkValue. Therefore, add a triple indicating that the new LinkValue
            is a new version of the existing one, and copy the UUID from the existing one.

            If this template is being used to create a new resource with its initial values, there won't be any existing
            LinkValues for standoff links, so linkUpdate.linkValueExists will be false. Generate a random UUID for the
            LinkValue.

            *@
            @if(linkUpdate.linkValueExists) {
                <@linkUpdate.newLinkValueIri> knora-base:previousValue ?linkValue@linkValueIndex ;
                    knora-base:valueHasUUID ?linkValueUUID@linkValueIndex .
            } else {
                <@linkUpdate.newLinkValueIri> knora-base:valueHasUUID "@{UuidUtil.base64Encode(UUID.randomUUID)}" .
            }

            @* Attach the new LinkValue to its containing resource. *@
            <@resourceToCreate.resourceIri> <@{linkUpdate.linkPropertyIri}Value> <@linkUpdate.newLinkValueIri> .
        }
    }
}
