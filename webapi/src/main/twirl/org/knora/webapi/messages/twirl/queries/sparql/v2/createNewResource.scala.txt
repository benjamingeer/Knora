@*
 * Copyright Â© 2021 - 2024 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import java.time.Instant
@import org.knora.webapi.IRI
@import org.knora.webapi.messages.twirl._
@import org.knora.webapi.messages.twirl.TypeSpecificValueInfo._
@import dsp.valueobjects.UuidUtil

@**
 * Creates a new resource.
 *@
@(dataNamedGraph: IRI,
  projectIri: IRI,
  creatorIri: IRI,
  creationDate: Instant,
  resourceIri: IRI,
  resourceClassIri: IRI,
  resourceLabel: String,
  permissions: String,
  linkUpdates: Seq[NewLinkValueInfo],
  newValueInfos: Seq[NewValueInfo]
)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

INSERT DATA {
    GRAPH <@dataNamedGraph> {
        <@resourceIri> rdf:type <@resourceClassIri> ;
            knora-base:isDeleted false ;
            knora-base:attachedToUser <@creatorIri> ;
            knora-base:attachedToProject <@projectIri> ;
            rdfs:label """@resourceLabel""" ;
            knora-base:hasPermissions "@permissions" ;
            knora-base:creationDate "@creationDate"^^xsd:dateTime .

        @for(newValueInfo <- newValueInfos) {
            # Value: @newValueInfo.valueIri
            # Property: @newValueInfo.propertyIri

            @* Construct the value. *@
            <@newValueInfo.valueIri> rdf:type <@newValueInfo.valueTypeIri> ;
                knora-base:isDeleted false  ;
                knora-base:valueHasString """@newValueInfo.valueHasString""" ;
                knora-base:valueHasUUID "@{UuidUtil.base64Encode(newValueInfo.valueUUID)}" .

            @newValueInfo.value match {

                case linkValue: LinkValueInfo => {
                    <@newValueInfo.resourceIri> <@newValueInfo.propertyIri.stripSuffix("Value")> <@linkValue.referredResourceIri> .

                    <@newValueInfo.valueIri> rdf:subject <@newValueInfo.resourceIri> ;
                        rdf:predicate <@newValueInfo.propertyIri.stripSuffix("Value")> ;
                        rdf:object <@linkValue.referredResourceIri> ;
                        knora-base:valueHasRefCount 1 .
                }

                case textValue: UnformattedTextValueInfo => {
                    textValue.valueHasLanguage.foreach { language => 
                        <@newValueInfo.valueIri> knora-base:valueHasLanguage """@language""" .
                    }
                }

                case textValue: FormattedTextValueInfo => {
                    textValue.valueHasLanguage.foreach { language => 
                        <@newValueInfo.valueIri> knora-base:valueHasLanguage """@language""" .
                    }
                    <@newValueInfo.valueIri> knora-base:valueHasMapping <@textValue.mappingIri> .
                    <@newValueInfo.valueIri> knora-base:valueHasMaxStandoffStartIndex @textValue.maxStandoffStartIndex .

                    @* Create a Standoff node for each standoff tag. *@
                    @for(createStandoff: StandoffTagInfo <- textValue.standoff) {

                        <@newValueInfo.valueIri> knora-base:valueHasStandoff <@createStandoff.standoffTagInstanceIri> .

                        <@createStandoff.standoffTagInstanceIri>
                                @*
                                Check for optional standoff properties
                                *@
                                @createStandoff.endIndex.foreach { index =>
                                    knora-base:standoffTagHasEndIndex @index ;
                                }
                                @createStandoff.startParentIri.foreach { iri => 
                                    knora-base:standoffTagHasStartParent <@iri> ;
                                }
                                @createStandoff.endParentIri.foreach { iri => 
                                    knora-base:standoffTagHasEndParent <@iri> ;
                                }
                                @createStandoff.originalXMLID.foreach { id => 
                                    knora-base:standoffTagHasOriginalXMLID """@id""" ;
                                }

                                @*
                                Handle standoff class specific standoff properties
                                *@
                                @for(createProperty <- createStandoff.attributes) {
                                    <@createProperty.propertyIri> @createProperty.value ;
                                }

                                knora-base:standoffTagHasStartIndex @createStandoff.startIndex ;
                                knora-base:standoffTagHasUUID "@{UuidUtil.base64Encode(createStandoff.uuid)}" ;
                                knora-base:standoffTagHasStart @createStandoff.startPosition ;
                                knora-base:standoffTagHasEnd @createStandoff.endPosition ;
                                rdf:type <@createStandoff.standoffTagClassIri> .
                    }
                }


                case intValue: IntegerValueInfo => {
                    <@newValueInfo.valueIri> knora-base:valueHasInteger @intValue.valueHasInteger .
                }

                case decimalValue: DecimalValueInfo => {
                    <@newValueInfo.valueIri> knora-base:valueHasDecimal "@decimalValue.valueHasDecimal"^^xsd:decimal .
                }

                case booleanValue: BooleanValueInfo => {
                    <@newValueInfo.valueIri> knora-base:valueHasBoolean @booleanValue.valueHasBoolean .
                }

                case uriValue: UriValueInfo => {
                    <@newValueInfo.valueIri> knora-base:valueHasUri """@uriValue.valueHasUri"""^^xsd:anyURI .
                }

                case dateValue: DateValueInfo => {
                    <@newValueInfo.valueIri> knora-base:valueHasStartJDN @dateValue.valueHasStartJDN ;
                                        knora-base:valueHasEndJDN @dateValue.valueHasEndJDN ;
                                        knora-base:valueHasStartPrecision "@dateValue.valueHasStartPrecision" ;
                                        knora-base:valueHasEndPrecision "@dateValue.valueHasEndPrecision" ;
                                        knora-base:valueHasCalendar "@dateValue.valueHasCalendar" .
                }

                case colorValue: ColorValueInfo => {
                    <@newValueInfo.valueIri> knora-base:valueHasColor """@colorValue.valueHasColor""" .
                }

                case geometryValue: GeomValueInfo => {
                    <@newValueInfo.valueIri> knora-base:valueHasGeometry """@geometryValue.valueHasGeometry""" .
                }

                case fileValue: StillImageFileValueInfo => {
                    <@newValueInfo.valueIri> knora-base:internalFilename """@fileValue.internalFilename""" ;
                        knora-base:internalMimeType """@fileValue.internalMimeType""" ;
                        knora-base:dimX @fileValue.dimX ;
                        knora-base:dimY @fileValue.dimY .
                    @fileValue.originalFilename.foreach { originalFilename =>
                        <@newValueInfo.valueIri> knora-base:originalFilename """@originalFilename""" .
                    }
                    @fileValue.originalMimeType.foreach { originalMimeType =>
                        <@newValueInfo.valueIri> knora-base:originalMimeType """@originalMimeType""" .
                    }
                }

                case fileValue: StillImageExternalFileValueInfo => {
                    <@newValueInfo.valueIri> knora-base:internalFilename """@fileValue.internalFilename""" ;
                        knora-base:internalMimeType """@fileValue.internalMimeType""" ;
                        knora-base:externalUrl """@fileValue.externalUrl""" .
                    @fileValue.originalFilename.foreach { originalFilename =>
                        <@newValueInfo.valueIri> knora-base:originalFilename """@originalFilename""" .
                    }
                    @fileValue.originalMimeType.foreach { originalMimeType =>
                        <@newValueInfo.valueIri> knora-base:originalMimeType """@originalMimeType""" .
                    }
                }

                case fileValue: DocumentFileValueInfo => {
                    <@newValueInfo.valueIri> knora-base:internalFilename """@fileValue.internalFilename""" ;
                        knora-base:internalMimeType """@fileValue.internalMimeType""" .
                    @fileValue.originalFilename.foreach { originalFilename =>
                        <@newValueInfo.valueIri> knora-base:originalFilename """@originalFilename""" .
                    }
                    @fileValue.originalMimeType.foreach { originalMimeType =>
                        <@newValueInfo.valueIri> knora-base:originalMimeType """@originalMimeType""" .
                    }
                    @fileValue.dimX.foreach { dimX =>
                        <@newValueInfo.valueIri> knora-base:dimX @dimX .
                    }
                    @fileValue.dimY.foreach { dimY =>
                        <@newValueInfo.valueIri> knora-base:dimY @dimY .
                    }
                    @fileValue.pageCount.foreach { pageCount =>
                        <@newValueInfo.valueIri> knora-base:pageCount @pageCount .
                    }
                }

                case fileValue: OtherFileValueInfo => {
                    <@newValueInfo.valueIri> knora-base:internalFilename """@fileValue.internalFilename""" ;
                        knora-base:internalMimeType """@fileValue.internalMimeType""" .
                    @fileValue.originalFilename.foreach { originalFilename =>
                        <@newValueInfo.valueIri> knora-base:originalFilename """@originalFilename""" .
                    }
                    @fileValue.originalMimeType.foreach { originalMimeType =>
                        <@newValueInfo.valueIri> knora-base:originalMimeType """@originalMimeType""" .
                    }
                }

                case listValue: HierarchicalListValueInfo => {
                    <@newValueInfo.valueIri> knora-base:valueHasListNode <@listValue.valueHasListNode> .
                }

                case intervalValue: IntervalValueInfo => {
                    <@newValueInfo.valueIri> knora-base:valueHasIntervalStart "@intervalValue.valueHasIntervalStart"^^xsd:decimal ;
                                        knora-base:valueHasIntervalEnd "@intervalValue.valueHasIntervalEnd"^^xsd:decimal .
                }

                case timeValue: TimeValueInfo => {
                    <@newValueInfo.valueIri> knora-base:valueHasTimeStamp "@timeValue.valueHasTimeStamp"^^xsd:dateTime  .
                }

                case geonameValue: GeonameValueInfo => {
                    <@newValueInfo.valueIri> knora-base:valueHasGeonameCode """@geonameValue.valueHasGeonameCode""" .
                }
            }

            @* Insert the value's comment, if given. *@
            @newValueInfo.comment.foreach { commentStr =>
                <@newValueInfo.valueIri> knora-base:valueHasComment """@commentStr""" .
            }

            <@newValueInfo.valueIri> knora-base:attachedToUser <@newValueInfo.valueCreator> ;
                knora-base:hasPermissions "@newValueInfo.valuePermissions"^^xsd:string ;
                knora-base:valueHasOrder @newValueInfo.valueHasOrder ;
                knora-base:valueCreationDate "@newValueInfo.creationDate"^^xsd:dateTime .

            @* Attach the value to the resource. *@
            <@newValueInfo.resourceIri> <@newValueInfo.propertyIri> <@newValueInfo.valueIri> .
        }


        @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {

            <@resourceIri> <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .

            @* Insert a LinkValue for the resource reference. *@
            <@linkUpdate.newLinkValueIri> rdf:type knora-base:LinkValue ;
                rdf:subject <@resourceIri> ;
                rdf:predicate <@linkUpdate.linkPropertyIri> ;
                rdf:object <@linkUpdate.linkTargetIri> ;
                knora-base:valueHasString "@linkUpdate.linkTargetIri" ;
                knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
                knora-base:isDeleted false ;
                knora-base:valueCreationDate "@creationDate"^^xsd:dateTime ;
                knora-base:attachedToUser <@linkUpdate.newLinkValueCreator> ;
                knora-base:hasPermissions "@linkUpdate.newLinkValuePermissions" ;
                knora-base:valueHasUUID "@linkUpdate.valueUuid" .

            @* Attach the new LinkValue to its containing resource. *@
            <@resourceIri> <@{linkUpdate.linkPropertyIri}Value> <@linkUpdate.newLinkValueIri> .
        }
    }
}
