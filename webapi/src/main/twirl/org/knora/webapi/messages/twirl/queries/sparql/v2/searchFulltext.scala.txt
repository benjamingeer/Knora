@*
 * Copyright Â© 2021 Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.exceptions.SparqlGenerationException
@import org.knora.webapi.util.ApacheLuceneSupport.LuceneQueryString

@*
 * Performs a simple full-text search.
 *
 * If the triplestore type is GraphDB, this template delegates to searchFulltextGraphDB.sparql.txt, which is optimised
 * for GraphDB. Otherwise, it delegates to searchFulltextStandard.sparql.txt.
 *
 * @param triplestore the name of the triplestore being used.
 * @param searchTerms search terms.
 * @param limitToProject limit search to the given project.
 * @param limitToResourceClass limit search to given resource class.
 * @param limitToStandoffClass limit the search to given standoff class.
 * @param returnFiles if true, return any file value attached to each matching resource.
 * @param separator the separator to be used in aggregation functions.
 * @param limit maximal amount of rows to be returned
 * @param offset offset for paging (starts with 0)
 * @param countQuery indicates whether it is a count query or the actual resources should be returned.
 *@
@(triplestore: String,
  searchTerms: LuceneQueryString,
  limitToProject: Option[IRI],
  limitToResourceClass: Option[IRI],
  limitToStandoffClass: Option[IRI],
  returnFiles: Boolean,
  separator: Option[Char],
  limit: Int,
  offset: Int,
  countQuery: Boolean)

@if(triplestore.startsWith("graphdb")) {
    @{
        org.knora.webapi.messages.twirl.queries.sparql.v2.txt.searchFulltextGraphDB(searchTerms = searchTerms,
                                                    limitToProject = limitToProject,
                                                    limitToResourceClass = limitToResourceClass,
                                                    limitToStandoffClass = limitToStandoffClass,
                                                    returnFiles = returnFiles,
                                                    separator = separator,
                                                    limit = limit,
                                                    offset = offset,
                                                    countQuery = countQuery)
    }
} else {
    @{
        org.knora.webapi.messages.twirl.queries.sparql.v2.txt.searchFulltextStandard(triplestore = triplestore,
                                                     searchTerms = searchTerms,
                                                     limitToProject = limitToProject,
                                                     limitToResourceClass = limitToResourceClass,
                                                     limitToStandoffClass = limitToStandoffClass,
                                                     returnFiles = returnFiles,
                                                     separator = separator,
                                                     limit = limit,
                                                     offset = offset,
                                                     countQuery = countQuery)
    }
}
