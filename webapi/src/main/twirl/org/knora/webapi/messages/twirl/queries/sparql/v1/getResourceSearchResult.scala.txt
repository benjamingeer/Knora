@*
 * Copyright Â© 2021 - 2022 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.exceptions.SparqlGenerationException
@import org.knora.webapi.util.ApacheLuceneSupport.MatchStringWhileTyping

@*
 * Performs a search for resources matching the given criteria, using SPARQL w/o inference
 * (except for the interface to Lucene, which is triplestore-specific).
 *
 * @param triplestore the name of the triplestore being used.
 * @param phrase the search phrase (e.g. "Reise ins").
 * @param lastTerm the last search term (e.g. "Heili").
 * @param resourceTypeIri if set, restricts search to this resource class and its subclasses.
 * @param numberOfProps the amount of describing properties to be returned for each found resource (e.g if set to two,
 *                      for an incunabula book its title and creator would be returned).
 * @param limitOfResults limits number of resources to be returned.
 * @param separator the separator to be used when concatenating the value strings.
 *@
@(triplestore: String,
  searchPhrase: MatchStringWhileTyping,
  restypeIriOption: Option[IRI],
  numberOfProps: Int,
  limitOfResults: Int,
  separator: Char)

PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>
PREFIX salsah-gui: <http://www.knora.org/ontology/salsah-gui#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?resourceIri ?resourceClass ?firstProp ?attachedToUser ?attachedToProject ?resourcePermissions
@if(numberOfProps > 1) {
    (GROUP_CONCAT(?valueString; separator="@separator") AS ?values) (GROUP_CONCAT(?property; separator="@separator") AS ?properties) (GROUP_CONCAT(?valueOrder; separator="@separator") AS ?valueOrders)
}
WHERE {

    @triplestore match {

        case "embedded-jena-tdb" | "fuseki" => {

            ?resourceIri <http://jena.apache.org/text#query> '@searchPhrase.generateLiteralForLuceneIndexWithExactSequence' .
            ?resourceIri rdfs:label ?firstProp .
            @searchPhrase.generateRegexFilterStatementForExactSequenceMatch("firstProp")

        }

        case other => {
            @{throw SparqlGenerationException(s"Triplestore type $other is not supported in this SPARQL template"); ()}
        }
    }

    FILTER NOT EXISTS {
        ?resourceIri knora-base:isDeleted true .
    }

    @restypeIriOption match {

        case Some(restypeIri) => {

            # Filter by resource class.

            ?resClass rdfs:subClassOf* <@restypeIri> .
            ?resourceIri a ?resClass .

        }

        case None => {

            @* Ensure that each matching resource is a knora-base:Resource. *@

            ?resClass rdfs:subClassOf* knora-base:Resource .
            ?resourceIri a ?resClass .

        }
    }

    @if(numberOfProps > 1) {

        OPTIONAL {

            ?resourceIri ?property ?valueObjectIri .
            ?property knora-base:objectClassConstraint knora-base:TextValue .
            ?valueObjectIri knora-base:valueHasString ?valueString ;
                knora-base:valueHasOrder ?valueOrder .

            FILTER NOT EXISTS {
                ?valueObjectIri knora-base:isDeleted true .
            }
        }

    }

    ?resourceIri a ?resourceClass ;
        knora-base:attachedToUser ?attachedToUser ;
        knora-base:attachedToProject ?attachedToProject ;
        knora-base:hasPermissions ?resourcePermissions .
}

GROUP BY ?resourceIri ?resourceClass ?firstProp ?attachedToUser ?attachedToProject ?resourcePermissions

LIMIT @limitOfResults
