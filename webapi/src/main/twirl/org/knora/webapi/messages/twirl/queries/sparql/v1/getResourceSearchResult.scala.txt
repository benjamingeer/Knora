@*
 * Copyright Â© 2021 - 2022 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.exceptions.SparqlGenerationException
@import org.knora.webapi.util.ApacheLuceneSupport.MatchStringWhileTyping

@*
 * Performs a search for resources matching the given criteria.
 *
 * If the triplestore type is GraphDB, this template delegates to getResourceSearchResultGraphDB.sparql.txt, which is
 * optimised for GraphDB. Otherwise, it delegates to getResourceSearchResultStandard.sparql.txt.
 *
 * @param triplestore the name of the triplestore being used.
 * @param phrase the search phrase (e.g. "Reise ins").
 * @param lastTerm the last search term (e.g. "Heili").
 * @param resourceTypeIri if set, restricts search to this resource class and its subclasses.
 * @param numberOfProps the amount of describing properties to be returned for each found resource (e.g if set to two,
 *                      for an incunabula book its title and creator would be returned).
 * @param limitOfResults limits number of resources to be returned.
 * @param separator the separator to be used when concatenating the value strings.
 *@
@(triplestore: String,
  searchPhrase: MatchStringWhileTyping,
  restypeIriOption: Option[IRI],
  numberOfProps: Int,
  limitOfResults: Int,
  separator: Char)

@if(triplestore.startsWith("graphdb")) {
    @{
        org.knora.webapi.messages.twirl.queries.sparql.v1.txt.getResourceSearchResultGraphDB(searchPhrase = searchPhrase,
                                                             restypeIriOption = restypeIriOption,
                                                             numberOfProps = numberOfProps,
                                                             limitOfResults = limitOfResults,
                                                             separator = separator)
    }
} else {
    @{
        org.knora.webapi.messages.twirl.queries.sparql.v1.txt.getResourceSearchResultStandard(triplestore = triplestore,
                                                              searchPhrase = searchPhrase,
                                                              restypeIriOption = restypeIriOption,
                                                              numberOfProps = numberOfProps,
                                                              limitOfResults = limitOfResults,
                                                              separator = separator)
    }
}
