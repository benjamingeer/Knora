@*
 * Copyright Â© 2021 - 2024 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI
@import dsp.valueobjects.V2

@*
 * Creates a new root list node.
 *
 * @param dataNamedGraph    the name of the graph into which the new list node will be created.
 * @param listClassIri      the IRI of the OWL class that the list should belong to.
 * @param projectIri        the IRI of the list's project.
 * @param nodeIri           the IRI of the new list node.
 * @param parentNodeIri     the IRI of the parent node if creating a child node.
 * @param rootNodeIri       the IRI of the root node if creating a child node.
 * @param position          the position of the new node if creating a child node.
 * @param maybeName         the optional name of the node.
 * @param maybeLabels       the new node's labels.
 * @param maybeComments     the new node's comments.
 *
 *@
@(dataNamedGraph: IRI,
  listClassIri: IRI,
  projectIri : IRI,
  nodeIri: IRI,
  parentNodeIri: Option[IRI],
  rootNodeIri: Option[IRI],
  position: Option[Int],
  maybeName: Option[String],
  maybeLabels: Seq[V2.StringLiteralV2],
  maybeComments: Option[Seq[V2.StringLiteralV2]]
)

PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

INSERT {
    GRAPH ?dataNamedGraph {
        ?nodeIri rdf:type ?listClassIri .

        @if(parentNodeIri.nonEmpty) {
            ?parentNodeIri knora-base:hasSubListNode ?nodeIri .

            ?nodeIri knora-base:hasRootNode ?rootNodeIri .

            ?nodeIri knora-base:listNodePosition "@position.get"^^xsd:integer .
        } else {
            ?nodeIri knora-base:attachedToProject ?projectIri .

            ?nodeIri knora-base:isRootNode "true"^^xsd:boolean .

        }

        @if(maybeName.nonEmpty) {
            ?nodeIri knora-base:listNodeName "@maybeName.get"^^xsd:string .
        }

        @if(maybeLabels.nonEmpty) {
            @for(label <- maybeLabels) {
                @if(label.language.nonEmpty) {
                    ?nodeIri rdfs:label """@label.value"""@@@{label.language.get} .
                } else {
                    ?nodeIri rdfs:label """@label.value"""^^xsd:string .
                }
            }
        }

        @if(maybeComments.nonEmpty) {
            @if(maybeComments.get.nonEmpty) {
                @for(comment <- maybeComments.get) {
                    @if(comment.language.nonEmpty) {
                        ?nodeIri rdfs:comment """@comment.value"""@@@{comment.language.get} .
                    } else {
                        ?nodeIri rdfs:comment """@comment.value"""^^xsd:string .
                    }
                }
            }
        }
    }
}

WHERE {
    BIND(IRI("@dataNamedGraph") AS ?dataNamedGraph)
    BIND(IRI("@nodeIri") AS ?nodeIri)
    @if(parentNodeIri.nonEmpty) {
        BIND(IRI("@parentNodeIri.get") AS ?parentNodeIri)
    }
    @if(rootNodeIri.nonEmpty) {
        BIND(IRI("@rootNodeIri.get") AS ?rootNodeIri)
    }
    BIND(IRI("@listClassIri") AS ?listClassIri)
    BIND(IRI("@projectIri") AS ?projectIri)
    FILTER NOT EXISTS { ?nodeIri rdf:type ?listClassIri . }
}
