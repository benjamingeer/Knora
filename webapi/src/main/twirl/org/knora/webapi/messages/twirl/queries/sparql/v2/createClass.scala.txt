@*
 * Copyright Â© 2021 - 2024 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi._
@import org.knora.webapi.messages.SmartIri
@import org.knora.webapi.messages.v2.responder.ontologymessages._
@import org.knora.webapi.messages.v2.responder.ontologymessages.OwlCardinality._
@import org.knora.webapi.messages.store.triplestoremessages._
@import java.time.Instant

@*
 * Creates a new class in an existing ontology. If the class already exists, this update does nothing.
 *
 * @param ontologyNamedGraphIri the IRI of the named graph where the ontology is stored.
 * @param ontologyIri the IRI of the ontology in which the class should be created.
 * @param classDef the definition of the class to be created.
 * @param lastModificationDate the xsd:dateTimeStamp that was attached to the ontology when it was last modified.
 * @param currentTime an xsd:dateTimeStamp that will be attached to the ontology.
 *@
@(ontologyNamedGraphIri: SmartIri,
  ontologyIri: SmartIri,
  classDef: ClassInfoContentV2,
  lastModificationDate: Instant,
  currentTime: Instant)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>
PREFIX salsah-gui: <http://www.knora.org/ontology/salsah-gui#>

DELETE {
    GRAPH ?ontologyNamedGraph {
        ?ontology knora-base:lastModificationDate "@lastModificationDate"^^xsd:dateTime .
    }
} INSERT {
    GRAPH ?ontologyNamedGraph {
        ?ontology knora-base:lastModificationDate "@currentTime"^^xsd:dateTime .

        @* Insert the class. *@

        @{
            org.knora.webapi.messages.twirl.queries.sparql.v2.txt.generateInsertStatementsForPredicates(
                entityIri = classDef.classIri,
                predicates = classDef.predicates.values
            )
        }

        @for(baseClass <- classDef.subClassOf) {

            <@classDef.classIri> rdfs:subClassOf <@baseClass> .

        }

        @for((propertyIri, knoraCardinality) <- classDef.directCardinalities) {

            @defining(knoraCardinality2OwlCardinality(knoraCardinality)) { owlCardinalityInfo =>

                <@classDef.classIri> rdfs:subClassOf [ rdf:type owl:Restriction ;
                                                       owl:onProperty <@propertyIri> ;

                                                       @owlCardinalityInfo.guiOrder match {
                                                           case Some(guiOrder) => {
                                                               salsah-gui:guiOrder "@guiOrder"^^xsd:nonNegativeInteger ;
                                                           }

                                                           case None => {}
                                                       }

                                                       <@owlCardinalityInfo.owlCardinalityIri> "@owlCardinalityInfo.owlCardinalityValue"^^xsd:nonNegativeInteger ] .

            }
        }

    }

}

WHERE {
    BIND(IRI("@ontologyNamedGraphIri") AS ?ontologyNamedGraph)
    BIND(IRI("@ontologyIri") AS ?ontology)

    GRAPH ?ontologyNamedGraph {
         ?ontology rdf:type owl:Ontology ;
             knora-base:lastModificationDate "@lastModificationDate"^^xsd:dateTime .
    }

    FILTER NOT EXISTS {
        <@classDef.classIri> rdf:type ?existingClassType .
    }
}
