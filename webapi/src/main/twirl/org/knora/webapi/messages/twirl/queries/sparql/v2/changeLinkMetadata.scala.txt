@*
 * Copyright Â© 2021 - 2023 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import java.time.Instant
@import org.knora.webapi._
@import dsp.errors.SparqlGenerationException
@import org.knora.webapi.messages.twirl.SparqlTemplateLinkUpdate

@**
 * Changes the metadata on a LinkValue.
 *
 * @param dataNamedGraph the named graph in which the project stores its data.
 * @param linkSourceIri the resource that is the source of the link.
 * @param linkUpdate a [[SparqlTemplateLinkUpdate]] specifying how to update the link value.
 * @param currentTime an xsd:dateTimeStamp that will be attached to the resources.
 * @param requestingUser the IRI of the user making the request.
 *
 * To find out whether the update succeeded, the application must query the deleted link.
 *@
@(dataNamedGraph: IRI,
  linkSourceIri: IRI,
  linkUpdate: SparqlTemplateLinkUpdate,
  maybeComment: Option[String],
  currentTime: Instant,
  requestingUser: IRI)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

DELETE {
    GRAPH ?dataNamedGraph {
        @* Delete the link source's last modification date so we can update it. *@
        ?linkSource knora-base:lastModificationDate ?linkSourceLastModificationDate .

        @* Detach the LinkValue from the link source. *@
        @if(linkUpdate.linkValueExists) {
            ?linkSource ?linkValueProperty ?currentLinkValue .

            @* Delete the UUID from the current version of the link value, because the new version will store it. *@
            ?currentLinkValue knora-base:valueHasUUID ?currentLinkUUID .
        } else {
            @{throw SparqlGenerationException(s"linkUpdate.linkValueExists must be true in this SPARQL template"); ()}
        }
    }
}
INSERT {
    GRAPH ?dataNamedGraph {
        @* Insert a new version of the LinkValue. *@
        ?newLinkValue rdf:type knora-base:LinkValue ;
            rdf:subject ?linkSource ;
            rdf:predicate ?linkProperty ;
            rdf:object ?linkTarget ;
            knora-base:valueHasString "@linkUpdate.linkTargetIri"^^xsd:string ;
            knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
            knora-base:valueCreationDate "@currentTime"^^xsd:dateTime ;
            knora-base:previousValue ?currentLinkValue ;
            knora-base:valueHasUUID ?currentLinkUUID ;
            knora-base:isDeleted false ;
            @maybeComment match {
                case Some(comment) => {
                    knora-base:valueHasComment """@comment""" ;
                }

                case None => {}
            }
            knora-base:attachedToUser <@linkUpdate.newLinkValueCreator> ;
            knora-base:hasPermissions "@linkUpdate.newLinkValuePermissions"^^xsd:string .

        @* Attach the new LinkValue to its containing resource. *@
        ?linkSource ?linkValueProperty ?newLinkValue .

        @* Update the link source's last modification date. *@
        ?linkSource knora-base:lastModificationDate "@currentTime"^^xsd:dateTime .
    }
}

WHERE {
    BIND(IRI("@dataNamedGraph") AS ?dataNamedGraph)
    BIND(IRI("@linkSourceIri") AS ?linkSource)
    BIND(IRI("@linkUpdate.linkPropertyIri") AS ?linkProperty)
    BIND(IRI("@{linkUpdate.linkPropertyIri}Value") AS ?linkValueProperty)
    BIND(IRI("@linkUpdate.linkTargetIri") AS ?linkTarget)
    BIND(IRI("@linkUpdate.newLinkValueIri") AS ?newLinkValue)

    @* Do nothing if the link source doesn't exist, is marked as deleted, or isn't a knora-base:Resource. *@

    ?linkSource rdf:type ?linkSourceClass ;
        knora-base:isDeleted false .
    ?linkSourceClass rdfs:subClassOf* knora-base:Resource .

    @* Make sure a direct link exists between the two resources. *@

    @if(linkUpdate.directLinkExists) {
        ?linkSource ?linkProperty ?linkTarget .
    } else {
        @{throw SparqlGenerationException(s"linkUpdate.directLinkExists must be true in this SPARQL template"); ()}
    }

    @*

    Make sure a knora-base:LinkValue exists describing the direct link, and has the correct reference count.

    *@

    @if(linkUpdate.linkValueExists) {
        ?linkSource ?linkValueProperty ?currentLinkValue .
        ?currentLinkValue rdf:type knora-base:LinkValue ;
            rdf:subject ?linkSource ;
            rdf:predicate ?linkProperty ;
            rdf:object ?linkTarget ;
            knora-base:valueHasRefCount @linkUpdate.currentReferenceCount ;
            knora-base:isDeleted false ;
            knora-base:valueHasUUID ?currentLinkUUID .
    } else {
        @{throw SparqlGenerationException(s"linkUpdate.linkValueExists must be true in this SPARQL template"); ()}
    }

    @* Get the link source's last modification date, if it has one, so we can update it. *@

    OPTIONAL {
        ?linkSource knora-base:lastModificationDate ?linkSourceLastModificationDate .
    }
}
