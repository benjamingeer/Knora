@*
 * Copyright Â© 2021 - 2024 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.messages.store.triplestoremessages.StringLiteralV2

@**
 * Updates an existing permission's properties.
 *
 * @param namedGraphIri           the named graph to update.
 * @param permissionIri           the IRI of the permission we want to update.
 * @param maybeGroup              the IRI of the new group.
 * @param maybeHasPermissions     the new set of permission values as string.
 * @param maybeResourceClass      the new resource class IRI.
 * @param maybeProperty           the new property IRI.
 *@

@(namedGraphIri: IRI,
  permissionIri: IRI,
  maybeGroup: Option[IRI],
  maybeHasPermissions: Option[String],
  maybeResourceClass: Option[IRI],
  maybeProperty: Option[IRI]
  )

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-admin: <http://www.knora.org/ontology/knora-admin#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

WITH <@namedGraphIri>
DELETE {
    @if(maybeGroup.isDefined){
        ?permissionIri knora-admin:forGroup ?currentGroup .
        ?permissionIri knora-admin:forResourceClass ?currentResourceClass .
        ?permissionIri knora-admin:forProperty ?currentProperty .
  	}

  	@if(maybeHasPermissions.isDefined){
        ?permissionIri knora-base:hasPermissions ?currentHasPermissions .
    }

    @if(maybeResourceClass.isDefined){
        ?permissionIri knora-admin:forResourceClass ?currentResourceClass .
        ?permissionIri knora-admin:forGroup ?currentGroup .
    }

    @if(maybeProperty.isDefined){
        ?permissionIri knora-admin:forProperty ?currentProperty .
        ?permissionIri knora-admin:forGroup ?currentGroup .
    }

} INSERT {
    @if(maybeGroup.isDefined){
        ?permissionIri knora-admin:forGroup <@maybeGroup.get> .
    }

    @if(maybeHasPermissions.isDefined){
        ?permissionIri knora-base:hasPermissions "@maybeHasPermissions.get"^^xsd:string .
    }

    @if(maybeResourceClass.isDefined){
       ?permissionIri knora-admin:forResourceClass <@maybeResourceClass.get> .
    }

    @if(maybeProperty.isDefined){
        ?permissionIri knora-admin:forProperty <@maybeProperty.get> .
    }
}

WHERE {
    BIND(IRI("@permissionIri") AS ?permissionIri)

    {
    ?permissionIri rdf:type knora-admin:AdministrativePermission .
    } UNION {
    ?permissionIri rdf:type knora-admin:DefaultObjectAccessPermission .
    }

    optional{?permissionIri knora-admin:forGroup ?currentGroup .}
    optional{?permissionIri knora-admin:forResourceClass ?currentResourceClass .}
    optional{?permissionIri knora-admin:forProperty ?currentProperty .}
    optional{?permissionIri knora-base:hasPermissions ?currentHasPermissions .}
}
