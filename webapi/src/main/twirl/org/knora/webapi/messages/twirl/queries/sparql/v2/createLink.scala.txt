@*
 * Copyright Â© 2021 - 2024 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import java.time.Instant
@import java.util.UUID
@import dsp.errors.SparqlGenerationException
@import dsp.valueobjects.UuidUtil
@import org.knora.webapi._
@import org.knora.webapi.messages.StringFormatter
@import org.knora.webapi.messages.twirl.SparqlTemplateLinkUpdate

@**
 * Inserts a new link between resources.
 *
 * @param dataNamedGraph    the named graph in which the project stores its data.
 * @param resourceIri       the resource that is the source of the link.
 * @param linkUpdate        a [[LinkUpdate]] object describing the link to insert.
 * @param newValueUUID      the UUID to be attached to the value.
 * @param creationDate      an xsd:dateTimeStamp that will be attached to the link value.
 * @param maybeComment      an optional comment on the link.
 * @param stringFormatter a [[StringFormatter]].
 *
 * To find out whether the update succeeded, the application must query the link.
 *@
@(dataNamedGraph: IRI,
  resourceIri: IRI,
  linkUpdate: SparqlTemplateLinkUpdate,
  newValueUUID: UUID,
  creationDate: Instant,
  maybeComment: Option[String],
  stringFormatter: StringFormatter)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

DELETE {
    GRAPH ?dataNamedGraph {
        @* Delete the link source's last modification date so we can update it. *@
        ?resource knora-base:lastModificationDate ?resourceLastModificationDate .
    }
} INSERT {
    GRAPH ?dataNamedGraph {
        @* Update the link source's last modification date. *@
        ?resource knora-base:lastModificationDate "@creationDate"^^xsd:dateTime .

        
        # Value: @linkUpdate.newLinkValueIri
        # Property: @linkUpdate.linkPropertyIri

        @* Insert a direct link between the source and target resources. *@
        @if(linkUpdate.insertDirectLink) {
            <@resourceIri> <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
        } else {
            @{throw SparqlGenerationException(s"LinkUpdate.insertDirectLink must be true in this SPARQL template (for value @index)"); ()}
        }

        @* Insert a LinkValue describing the link. *@
        <@linkUpdate.newLinkValueIri> rdf:type knora-base:LinkValue ;
            rdf:subject <@resourceIri> ;
            rdf:predicate <@linkUpdate.linkPropertyIri> ;
            rdf:object <@linkUpdate.linkTargetIri> ;
            knora-base:valueHasString "@linkUpdate.linkTargetIri"^^xsd:string ;
            knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
            @maybeComment match {
                case Some(comment) => {
                    knora-base:valueHasComment """@comment""" ;
                }

                case None => {}
            }
            knora-base:valueHasOrder ?nextOrder ;
            knora-base:isDeleted false ;
            knora-base:valueHasUUID "@{UuidUtil.base64Encode(newValueUUID)}" ;
            knora-base:valueCreationDate "@creationDate"^^xsd:dateTime ;
            knora-base:attachedToUser <@linkUpdate.newLinkValueCreator> ;
            knora-base:hasPermissions "@linkUpdate.newLinkValuePermissions"^^xsd:string .

        @* Attach the new LinkValue to its containing resource. *@
        <@resourceIri> <@{linkUpdate.linkPropertyIri}Value> <@linkUpdate.newLinkValueIri> .

    }
}

WHERE {
    BIND(IRI("@dataNamedGraph") AS ?dataNamedGraph)
    BIND(IRI("@resourceIri") AS ?resource)

    @* Do nothing if the resource doesn't exist, is marked as deleted, or isn't actually a resource. *@

    ?resource rdf:type ?resourceClass ;
        knora-base:isDeleted false .
    ?resourceClass rdfs:subClassOf* knora-base:Resource .

    @* Get the link source's last modification date, if it has one, so we can update it. *@

    OPTIONAL {
        ?resource knora-base:lastModificationDate ?resourceLastModificationDate .
    }

    # Value: @linkUpdate.newLinkValueIri
    # Property: @linkUpdate.linkPropertyIri

    BIND(IRI("@linkUpdate.linkPropertyIri") AS ?linkProperty)
    BIND(IRI("@{linkUpdate.linkPropertyIri}Value") AS ?linkValueProperty)
    BIND(IRI("@linkUpdate.newLinkValueIri") AS ?newLinkValue)
    BIND(IRI("@linkUpdate.linkTargetIri") AS ?linkTarget)

  @if(linkUpdate.linkTargetExists) {
  
        @* Make sure the link target is a knora-base:Resource. *@

        ?linkTarget rdf:type ?linkTargetClass .
        ?linkTargetClass rdfs:subClassOf* knora-base:Resource .

        @* Do nothing if the target resource belongs to the wrong OWL class. *@

        ?linkProperty knora-base:objectClassConstraint ?expectedTargetClass .
        ?linkTargetClass rdfs:subClassOf* ?expectedTargetClass .

        @* Do nothing if the target resource doesn't exist or is marked as deleted. *@

        ?linkTarget knora-base:isDeleted false .

        @* Do nothing if the source resource's OWL class has no cardinality for the link property. *@
        ?resourceClass rdfs:subClassOf* ?restriction .
        ?restriction a owl:Restriction .
        ?restriction owl:onProperty ?linkProperty .

    }

    @if(linkUpdate.directLinkExists) {
        @{throw SparqlGenerationException("linkUpdate.directLinkExists must be false in this SPARQL template"); ()}
    }

    @if(linkUpdate.linkValueExists) {
        @{throw SparqlGenerationException("linkUpdate.linkValueExists must be false in this SPARQL template"); ()}
    }

    @*

    Bind a variable for knora-base:valueHasOrder for the new value.

    We have to do a subquery to determine the next available knora-base:valueHasOrder. This works as follows: if the
    property already has one or more (non-deleted) values in the resource, find the one with the highest order, add 1
    to its order, and give the resulting order to the new value. Otherwise, give the new value an order of 0.

    *@

    {
        SELECT ((MAX(?order)) AS ?maxOrder) (IF(BOUND(?maxOrder), ?maxOrder + 1, 0) AS ?nextOrder)
        WHERE {
            <@resourceIri> <@{linkUpdate.linkPropertyIri}Value> ?otherLinkValue .
            ?otherLinkValue knora-base:valueHasOrder ?order ;
                knora-base:isDeleted false .
        }
    }

}
