@*
 * Copyright Â© 2021 - 2024 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.messages.store.triplestoremessages.StringLiteralV2

@**
 * Updates an existing list with the provided values.
 *
 * @param dataNamedGraph     the named graph to update.
 * @param nodeIri            the IRI of the list we want to update.
 * @param projectIri         the IRI of the list's project.
 * @param listClassIri       the IRI of the OWL class that the list should belong to.
 * @param hasOldName         the old name of the list.
 * @param isRootNode         Flag to identify root or child node.
 * @param maybeName          the new name of the list.
 * @param maybelabels        the new optional label values.
 * @param maybeComments      the new optional comment values.
 *@
@(dataNamedGraph: IRI,
  nodeIri: IRI,
  projectIri: IRI,
  listClassIri: IRI,
  hasOldName: Boolean,
  isRootNode: Boolean,
  maybeName : Option[String],
  maybeLabels: Option[Seq[StringLiteralV2]],
  maybeComments: Option[Seq[StringLiteralV2]])

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

WITH <@dataNamedGraph>
DELETE {

    @* Delete current values, for which we have a new one. *@

    @if(maybeLabels.nonEmpty) {
        ?nodeIri  rdfs:label ?currentLabels .
    }

    @if(hasOldName && maybeName.nonEmpty) {
        ?nodeIri knora-base:listNodeName ?currentListName .
    }

    @if(maybeComments.nonEmpty) {
        ?nodeIri rdfs:comment ?currentComments .
    }

} INSERT {

    @* Add the new values. *@

    @if(maybeName.nonEmpty) {
        ?nodeIri knora-base:listNodeName "@maybeName.get"^^xsd:string .
    }

    @if(maybeLabels.nonEmpty) {
        @for(label <- maybeLabels.get) {
            @if(label.language.nonEmpty) {
                ?nodeIri rdfs:label """@label.value"""@@@{label.language.get} .
            } else {
                ?nodeIri rdfs:label """@label.value"""^^xsd:string .
            }
        }
     }

    @if(maybeComments.nonEmpty) {
        @for(comment <- maybeComments.get) {
            @if(comment.language.nonEmpty) {
                ?nodeIri rdfs:comment """@comment.value"""@@@{comment.language.get} .
            } else {
                ?nodeIri rdfs:comment """@comment.value"""^^xsd:string .
            }
        }
    }
}

WHERE {
    BIND(IRI("@nodeIri") AS ?nodeIri)


    @* Get all current defined values. *@

    ?nodeIri rdf:type knora-base:ListNode .
    @if(isRootNode) {
        BIND(IRI("@projectIri") AS ?projectIri)
        ?nodeIri knora-base:attachedToProject ?projectIri .
    }
    optional {?nodeIri knora-base:listNodeName ?currentListName .}

    optional {?nodeIri rdfs:label ?currentLabels .}

    optional {?nodeIri rdfs:comment ?currentComments .}

}
