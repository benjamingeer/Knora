@*
 * Copyright Â© 2021 Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.exceptions._
@import org.knora.webapi.util.ApacheLuceneSupport.MatchStringWhileTyping

@*
 * Performs a search for resources matching the given criteria, using GraphDB.
 *
 * This template is used only by getResourceSearchResult.scala.txt.
 *
 * Since the triplestore type is GraphDB, we assume that inference is enabled, and we use it to optimise the generated
 * SPARQL. Specifically, we use inference to return search results matching subclasses of the resource class
 * specified by the user. This requires us to use GraphDB's GRAPH <http://www.ontotext.com/explicit>
 * whenever we need to get explicit (non-inferred) statements.
 *
 * @param phrase the search phrase (e.g. "Reise ins").
 * @param lastTerm the last search term (e.g. "Heili").
 * @param resourceTypeIri if set, restricts search to this resource class and its subclasses.
 * @param numberOfProps the amount of describing properties to be returned for each found resource (e.g if set to two,
 *                      for an incunabula book its title and creator would be returned).
 * @param limitOfResults limits number of resources to be returned.
 * @param separator the separator to be used when concatenating the value strings.
 *@
@(searchPhrase: MatchStringWhileTyping,
  restypeIriOption: Option[IRI],
  numberOfProps: Int,
  limitOfResults: Int,
  separator: Char)


PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>
PREFIX salsah-gui: <http://www.knora.org/ontology/salsah-gui#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?resourceIri ?resourceClass ?firstProp ?attachedToUser ?attachedToProject ?resourcePermissions
@if(numberOfProps > 1) {
    (GROUP_CONCAT(?valueString; separator="@separator") AS ?values) (GROUP_CONCAT(?property; separator="@separator") AS ?properties) (GROUP_CONCAT(?valueOrder; separator="@separator") AS ?valueOrders)
}
WHERE {

    ?resourceIri rdfs:label ?firstProp .
    ?firstProp <http://www.ontotext.com/owlim/lucene#fullTextSearchIndex> '@searchPhrase.generateLiteralForLuceneIndexWithExactSequence' .
    @searchPhrase.generateRegexFilterStatementForExactSequenceMatch("firstProp")

    ?resourceIri knora-base:isDeleted false .

    @restypeIriOption match {

        case Some(restypeIri) => {

            # Filter by resource class.

            ?resourceIri a <@restypeIri> .

        }

        case None => {

            @* Ensure that each matching resource is a knora-base:Resource. *@

            ?resourceIri a knora-base:Resource .
        }
    }

    @if(numberOfProps > 1) {

        OPTIONAL {

            GRAPH <http://www.ontotext.com/explicit> {
                ?resourceIri ?property ?valueObjectIri .
            }

            ?property knora-base:objectClassConstraint knora-base:TextValue .
            ?valueObjectIri knora-base:valueHasString ?valueString ;
                knora-base:isDeleted false ;
                knora-base:valueHasOrder ?valueOrder .

        }

    }

    GRAPH <http://www.ontotext.com/explicit> {
        ?resourceIri a ?resourceClass ;
            knora-base:attachedToUser ?attachedToUser ;
            knora-base:attachedToProject ?attachedToProject ;
            knora-base:hasPermissions ?resourcePermissions .
    }

}

GROUP BY ?resourceIri ?resourceClass ?firstProp ?attachedToUser ?attachedToProject ?resourcePermissions

LIMIT @limitOfResults
