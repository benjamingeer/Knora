@*
 * Copyright Â© 2021 - 2024 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import java.time.Instant
@import java.util.UUID
@import dsp.errors.SparqlGenerationException
@import dsp.valueobjects.UuidUtil
@import org.knora.webapi._
@import org.knora.webapi.messages.twirl.SparqlTemplateLinkUpdate
@import org.knora.webapi.messages.v2.responder.valuemessages._

@**
 * Generates statements to be added to the INSERT clause of a SPARQL update when creating a new value of a resource
 * property (as opposed to a new version of an existing value). This template is used in two contexts: when creating a
 * single value in an existing resource, and when creating a new resource with its initial values.
 *
 * @param resourceIri the IRI of the resource.
 * @param propertyIri the IRI of the property for which the value is being created.
 * @param value the value to insert.
 * @param newValueIri the IRI of the new value.
 * @param newValueUUID the UUID to be attached to the value.
 * @param linkUpdates a list of [[SparqlTemplateLinkUpdate]] objects describing links and LinkValues that need to be
 *        updated for resource references in Standoff text values. This list will be empty if the links and LinkValues
 *        are being created separately.
 * @param valueCreator the IRI of the user who created the value.
 * @param valuePermissions the permissions that should be attached to the value.
 * @param creationDate an xsd:dateTimeStamp that will be attached to the value.
 * @param the knora-base:valueHasOrder of the new value. If not provided, the SPARQL variable ?nextOrder will be used.
 *@
@(resourceIri: IRI,
  propertyIri: IRI,
  value: ValueContentV2,
  newValueIri: IRI,
  newValueUUID: UUID,
  valueCreator: IRI,
  valuePermissions: String,
  creationDate: Instant,
  maybeValueHasOrder: Option[Int])

        # Value: @newValueIri
        # Property: @propertyIri

        @* Construct the value. *@
        <@newValueIri> rdf:type <@value.valueType> ;
            knora-base:isDeleted false  ;
            knora-base:valueHasString """@value.valueHasString""" ;
            knora-base:valueHasUUID "@{UuidUtil.base64Encode(newValueUUID)}" .


        @value match {

            case linkValueContentV2: LinkValueContentV2 => {

                <@resourceIri> <@propertyIri.stripSuffix("Value")> <@linkValueContentV2.referredResourceIri> .

                <@newValueIri> rdf:subject <@resourceIri> ;
                    rdf:predicate <@propertyIri.stripSuffix("Value")> ;
                    rdf:object <@linkValueContentV2.referredResourceIri> ;
                #     knora-base:valueHasString "@linkValueContentV2.referredResourceIri"^^xsd:string ;
                    knora-base:valueHasRefCount 1 .
                
            }

            case textValue: TextValueContentV2 => {

                @if(!textValue.valueHasLanguage.isEmpty) {
                    <@newValueIri> knora-base:valueHasLanguage """@textValue.valueHasLanguage.get""" .
                }

                @if(textValue.standoff.nonEmpty) {

                    @* Create a Standoff node for each standoff tag. *@

                    @textValue.mappingIri match {
                        case Some(definedMappingIri) => {
                            <@newValueIri> knora-base:valueHasMapping <@definedMappingIri> .
                        }

                        case None => {}
                    }

                    <@newValueIri> knora-base:valueHasMaxStandoffStartIndex @textValue.computedMaxStandoffStartIndex.get .

                    @for((createStandoff: CreateStandoffTagV2InTriplestore, standoffNodeIndex) <- textValue.prepareForSparqlInsert(newValueIri).zipWithIndex) {

                        <@newValueIri> knora-base:valueHasStandoff <@createStandoff.standoffTagInstanceIri> .

                        <@createStandoff.standoffTagInstanceIri>

                                @*

                                Check for optional standoff properties

                                *@

                                @if(createStandoff.standoffNode.endIndex.isDefined) {
                                    knora-base:standoffTagHasEndIndex @createStandoff.standoffNode.endIndex.get ;
                                }

                                @if(createStandoff.startParentIri.isDefined) {
                                    knora-base:standoffTagHasStartParent <@createStandoff.startParentIri.get> ;
                                }

                                @if(createStandoff.endParentIri.isDefined) {
                                    knora-base:standoffTagHasEndParent <@createStandoff.endParentIri.get> ;
                                }

                                @if(createStandoff.standoffNode.originalXMLID.isDefined) {
                                    knora-base:standoffTagHasOriginalXMLID """@createStandoff.standoffNode.originalXMLID.get""" ;
                                }

                                @*

                                Handle standoff class specific standoff properties

                                *@
                                @for(createProperty <- createStandoff.standoffNode.attributes) {

                                    <@createProperty.standoffPropertyIri> @createProperty.rdfValue ;

                                }

                                knora-base:standoffTagHasStartIndex @createStandoff.standoffNode.startIndex ;
                                knora-base:standoffTagHasUUID "@{UuidUtil.base64Encode(createStandoff.standoffNode.uuid)}" ;
                                knora-base:standoffTagHasStart @createStandoff.standoffNode.startPosition ;
                                knora-base:standoffTagHasEnd @createStandoff.standoffNode.endPosition ;
                                rdf:type <@createStandoff.standoffNode.standoffTagClassIri> .

                    }

                }
            }


            case intValue: IntegerValueContentV2 => {

                <@newValueIri> knora-base:valueHasInteger @intValue.valueHasInteger .

            }

            case decimalValue: DecimalValueContentV2 => {

                <@newValueIri> knora-base:valueHasDecimal "@decimalValue.valueHasDecimal"^^xsd:decimal .

            }

            case booleanValue: BooleanValueContentV2 => {

                <@newValueIri> knora-base:valueHasBoolean @booleanValue.valueHasBoolean .

            }

            case uriValue: UriValueContentV2 => {

                <@newValueIri> knora-base:valueHasUri """@uriValue.valueHasUri"""^^xsd:anyURI .

            }

            case dateValue: DateValueContentV2 => {

                <@newValueIri> knora-base:valueHasStartJDN @dateValue.valueHasStartJDN ;
                                     knora-base:valueHasEndJDN @dateValue.valueHasEndJDN ;
                                     knora-base:valueHasStartPrecision "@dateValue.valueHasStartPrecision" ;
                                     knora-base:valueHasEndPrecision "@dateValue.valueHasEndPrecision" ;
                                     knora-base:valueHasCalendar "@dateValue.valueHasCalendar" .

            }

            case colorValue: ColorValueContentV2 => {

                <@newValueIri> knora-base:valueHasColor """@colorValue.valueHasColor""" .

            }

            case geometryValue: GeomValueContentV2 => {

                <@newValueIri> knora-base:valueHasGeometry """@geometryValue.valueHasGeometry""" .

            }

            case fileValueContentV2: FileValueContentV2 => {
                <@newValueIri> knora-base:internalFilename """@fileValueContentV2.fileValue.internalFilename""" ;
                    knora-base:internalMimeType """@fileValueContentV2.fileValue.internalMimeType""" .

                @fileValueContentV2.fileValue.originalFilename match {
                    case Some(definedOriginalFilename) => {
                        <@newValueIri> knora-base:originalFilename """@definedOriginalFilename""" .
                    }

                    case None => {}
                }

                @fileValueContentV2.fileValue.originalMimeType match {
                    case Some(definedOriginalMimeType) => {
                        <@newValueIri> knora-base:originalMimeType """@definedOriginalMimeType""" .
                    }

                    case None => {}
                }

                @fileValueContentV2 match {
                    case stillImageFileValue: StillImageFileValueContentV2 => {
                        <@newValueIri> knora-base:dimX @stillImageFileValue.dimX ;
                            knora-base:dimY @stillImageFileValue.dimY .
                    }

                    case stillImageFileValue: StillImageExternalFileValueContentV2 => {
                        <@newValueIri> knora-base:externalUrl """@stillImageFileValue.externalUrl.value.toString""" .
                    }

                    case documentFileValue: DocumentFileValueContentV2 => {
                        @documentFileValue.dimX match {
                            case Some(definedDimX) => {
                                <@newValueIri> knora-base:dimX @definedDimX .
                            }

                            case None => {}
                        }

                        @documentFileValue.dimY match {
                            case Some(definedDimY) => {
                                <@newValueIri> knora-base:dimY @definedDimY .
                            }

                            case None => {}
                        }

                        @documentFileValue.pageCount match {
                            case Some(definedPageCount) => {
                                <@newValueIri> knora-base:pageCount @definedPageCount .
                            }

                            case None => {}
                        }
                    }

                    case _ => {}
                }
            }

            case listValue: HierarchicalListValueContentV2 => {

                <@newValueIri> knora-base:valueHasListNode <@listValue.valueHasListNode> .

            }

            case intervalValue: IntervalValueContentV2 => {

                <@newValueIri> knora-base:valueHasIntervalStart "@intervalValue.valueHasIntervalStart"^^xsd:decimal ;
                                     knora-base:valueHasIntervalEnd "@intervalValue.valueHasIntervalEnd"^^xsd:decimal .

            }

            case timeValue: TimeValueContentV2 => {

                <@newValueIri> knora-base:valueHasTimeStamp "@timeValue.valueHasTimeStamp"^^xsd:dateTime  .

            }

            case geonameValue: GeonameValueContentV2 => {

                <@newValueIri> knora-base:valueHasGeonameCode """@geonameValue.valueHasGeonameCode""" .

            }

            case other => {
                @{throw SparqlGenerationException(s"Value object $other is not supported in this SPARQL template"); ()}
            }
        }

        @* Insert the value's comment, if given. *@
        @value.comment match {
            case Some(commentStr) => {
                <@newValueIri> knora-base:valueHasComment """@commentStr""" .
            }

            case None => {}
        }

        <@newValueIri> knora-base:attachedToUser <@valueCreator> ;
            knora-base:hasPermissions "@valuePermissions"^^xsd:string ;
            @maybeValueHasOrder match {
                case Some(order) => {
                    knora-base:valueHasOrder @order ;
                }

                case None => {
                    knora-base:valueHasOrder ?nextOrder ;
                }
            }
            knora-base:valueCreationDate "@creationDate"^^xsd:dateTime .



        @* Attach the value to the resource. *@
        <@resourceIri> <@propertyIri> <@newValueIri> .
