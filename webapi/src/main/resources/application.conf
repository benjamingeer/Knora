akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "INFO"
    stdout-loglevel = "INFO"
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    log-dead-letters = off
    log-dead-letters-during-shutdown = off

    actor {
        deployment {
            user/knoraHttpServiceManager/knoraHttpServiceRouter {
                router = round-robin-pool
                nr-of-instances = 100
            }

            user/storeManager/triplestoreManager/httpTriplestoreRouter {
                router = round-robin-pool
                nr-of-instances = 100
            }

            user/responderManager/resourcesRouter {
                router = round-robin-pool
                nr-of-instances = 50
            }

            user/responderManager/valuesRouter {
                router = round-robin-pool
                nr-of-instances = 20
            }

            user/responderManager/sipiRouter {
                router = round-robin-pool
                nr-of-instances = 50
            }

            user/responderManager/listsRouter {
                router = round-robin-pool
                nr-of-instances = 50
            }

            user/responderManager/usersRouter {
                router = round-robin-pool
                nr-of-instances = 50
            }

            user/responderManager/hierarchicalListsRouter {
                router = round-robin-pool
                nr-of-instances = 50
            }

            user/responderManager/searchRouter {
                router = round-robin-pool
                nr-of-instances = 50
            }

            user/responderManager/ontologyRouter {
                router = round-robin-pool
                nr-of-instances = 50
            }

            user/responderManager/projectsRouter {
                router = round-robin-pool
                nr-of-instances = 20
            }

            user/responderManager/ckanRouter {
                router = round-robin-pool
                nr-of-instances = 5
            }

            user/responderManager/storeRouter {
                router = round-robin-pool
                nr-of-instances = 1
            }
        }
    }
}

app {

    default-timeout = 60 // seconds

    dump-messages = false // If true, dump messages sent from and received by routes as Scala source code in the log.

    show-internal-errors = true // If true, clients will see error messages from internal errors. Useful for debugging. If false, those error messages will appear only in the log.

    skip-authentication = false // If true, the authentication process is skiped and the Lothar Schmidt user is returned by default.

    // Using the assets route. Works only for read access and only a few images.
    sipi {
        url = "http://localhost"
        port = 1024
        prefix = "knora"
        path-conversion-route = "convert_from_binaries"
        file-conversion-route = "convert_from_file"
        image-mime-types = ["image/tiff", "image/jpeg", "image/png", "image/jp2"]
        movie-mime-types = []
        sound-mime-types = []
    }

//    sipi {
//        url = "http://localhost"
//        path = ""
//        port = 1024
//        path-conversion-route = "convert_path"
//        file-conversion-route = "convert_file"
//        image-mime-types = ["image/tiff", "image/jpeg", "image/png", "image/jp2"]
//        movie-mime-types = []
//        sound-mime-types = []
//    }

    http {
        interface = "localhost"
        port = 3333
        base-salsah-url = "http://localhost:3335/"
        project-icons-basepath = "project-icons/"
    }

    caches = [
        {
            cache-name = "ontologyCache"
            max-elements-in-memory = 0
            overflow-to-disk = false
            eternal = true
            time-to-live-seconds = 0
            time-to-idle-seconds = 0
        },
        {
            cache-name = "authenticationCache"
            max-elements-in-memory = 0
            overflow-to-disk = false
            eternal = true
            time-to-live-seconds = 600
            time-to-idle-seconds = 0
        }

    ]

    tmp-datadir = "/tmp/webapi_tmp/" // dir must exists on disk!
    datadir = "/tmp/webapi/" // dir must exists on disk!

    max-results-per-search-result-page = 1000

    gui {
        // The default size of resource type icons. TODO: put icon sizes in the triplestore instead.
        default-icon-size {
            dimX = 32
            dimY = 32
        }
    }

    triplestore {
        dbtype = "fuseki"
        // dbtype = "graphdb"
        // dbtype = "embedded-jena-tdb"
        // dbtype = "sesame"
        // dbtype = "embedded-jena-graphdb"
        // dbtype = "fake-triplestore"

        host = "localhost"

        graphdb {
            port = 8080
            repository-name = "knora-test"
            username = "admin"
            password = "root"
        }

        sesame {
            port = 8080
            repository-name = "knora-test"
        }

        fuseki {
            port = 3030
            repository-name = "knora-test"
            tomcat = false
            tomcat-context = ""
        }

        embedded-jena-tdb {
            persisted = true // "false" -> memory, "true" -> disk
            loadExistingData = false // "false" -> use data if exists, "false" -> create a fresh store
            storage-path = "_TMP" // ignored if "memory"
        }

        embedded-jena-graphdb {
            graphdb-persisted-storage = true
            graphdb-storage-path = "_TMP_GRAPHDB"
        }

        fake-jena-tdb {
            fake-persisted-storage = true
            fake-triplestore-data-dir = "src/main/resources/query-log"
        }

        reload-on-start = false // ignored if "memory" as it will always reload

        rdf-data = [
            {
                path = "../knora-ontologies/knora-base.ttl"
                name = "http://www.knora.org/ontology/knora-base"
            }
            {
                path = "../knora-ontologies/knora-dc.ttl"
                name = "http://www.knora.org/ontology/dc"
            }
            {
                path = "../knora-ontologies/salsah-gui.ttl"
                name = "http://www.knora.org/ontology/salsah-gui"
            }
            {
                path = "_test_data/ontologies/incunabula-onto.ttl"
                name = "http://www.knora.org/ontology/incunabula"
            }
            {
                path = "_test_data/demo_data/incunabula-demo-data.ttl"
                name = "http://www.knora.org/data/incunabula"
            }
            {
                path = "_test_data/ontologies/images-demo-onto.ttl"
                name = "http://www.knora.org/ontology/dokubib"
            }
            {
                path = "_test_data/demo_data/images-demo-data.ttl"
                name = "http://www.knora.org/data/dokubib"
            }
            {
                path = "_test_data/ontologies/anything-onto.ttl"
                name = "http://www.knora.org/ontology/anything"
            }
            {
                path = "_test_data/all_data/anything-data.ttl"
                name = "http://www.knora.org/data/anything"
            }
            {
                path = "_test_data/ontologies/beol-onto.ttl"
                name = "http://www.knora.org/ontology/beol"
            }
            {
                path = "_test_data/all_data/beol-data.ttl"
                name = "http://www.knora.org/data/beol"
            }

        ]

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Fake triplestore settings
        //
        // The application can generate a fake triplestore, consisting of SPARQL queries and responses saved in
        // text files (in fake-triplestore-query-dir). This is useful for:
        //
        // * measuring the response time of the application minus the response time of the triplestore.
        //
        // * debugging SPARQL queries, because you can open the generated queries in a text editor and copy and paste
        //   them into something like GraphDB Workbench to experiment with them.
        //
        // * benchmarking triplestores, because you can feed the whole fake triplestore file structure to RDFBench.
        //
        // To generate a fake triplestore, set fake-triplestore to "prepare", start the application, and run one or more
        // API operations. The fake triplestore will contain all the SPARQL queries and responses involved in those
        // operations.
        //
        // To have the application use the fake triplestore, set fake-triplestore to "use", and restart the application.
        // The entire contents of the fake triplestore will be loaded when the application starts, and all SPARQL queries
        // will simply be hashtable lookups in this in-memory data.
        //
        // To just use a real triplestore, set fake-triplestore to "off".
        fake-triplestore = "off"
        fake-triplestore-data-dir = "src/main/resources/query-log"
    }

    // Each project has a named graph for its ontology, and a named graph for its data.
    project-named-graphs =
        [
            {
                project = "http://data.knora.org/projects/knora-base"
                ontology = "http://www.knora.org/ontology/knora-base"
                data = "knora-base"
                visibleInGUI = true
                name = "Knora-Base"
            }
            {
                project = "http://data.knora.org/projects/77275339"
                ontology = "http://www.knora.org/ontology/incunabula"
                data = "http://www.knora.org/data/incunabula"
                visibleInGUI = true
                name = "Incunabula"
            }
            {
                project = "http://data.knora.org/projects/b83b99ca01"
                ontology = "http://www.knora.org/ontology/dokubib"
                data = "http://www.knora.org/data/dokubib"
                visibleInGUI = false
                name = "Dokubib"
            }
            {
                project = "http://data.knora.org/projects/yTerZGyxjZVqFMNNKXCDPF"
                ontology = "http://www.knora.org/ontology/beol"
                data = "http://www.knora.org/data/beol"
                visibleInGUI = true
                name = "Bernoulli-Euler Online"
            }
            {
                project = "http://data.knora.org/projects/images"
                ontology = "http://www.knora.org/ontology/images"
                data = "http://www.knora.org/data/images"
                visibleInGUI = true
                name = "Images Test Project"
            }
            {
                project = "http://data.knora.org/projects/anything"
                ontology = "http://www.knora.org/ontology/anything"
                data = "http://www.knora.org/data/anything"
                visibleInGUI = true
                name = "Anything Test Project"
            }
        ]

}

user {
    default-language: "en"
}


spray.can {
    server {
        idle-timeout = 200 s
        request-timeout = 180 s
        parsing {
            max-content-length = 110M
        }
    }
}

//kamon.metric.tick-interval = 1 second
//
//kamon.modules {
//    kamon-statsd.auto-start = false
//    kamon-log-reporter.auto-start = false
//}
//
//kamon.metric.filters {
//    akka-actor {
//        includes = ["**"]
//        excludes = []
//    }
//    akka-router {
//        includes = ["**"]
//        excludes = []
//    }
//    akka-dispatcher {
//        includes = ["**"]
//        excludes = []
//    }
//    trace {
//        includes = ["**"]
//        excludes = []
//    }
//}
//
//kamon.akka.ask-pattern-timeout-warning = "lightweight"
//
//kamon.statsd {
//    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
//    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
//    hostname = "192.168.59.103"
//    port = 8125
//
//    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
//    # kamon.metric.tick-interval setting.
//    flush-interval = 1 second
//
//    # Max packet size for UDP metrics data sent to StatsD.
//    max-packet-size = 1024 bytes
//
//    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
//    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
//    includes {
//        actor = ["*"]
//        trace = ["*"]
//        dispatcher = ["*"]
//    }
//
//    simple-metric-key-generator {
//        # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
//        # this pattern:
//        #    application.host.entity.entity-name.metric-name
//        application = "knora-api"
//    }
//}
//kamon.newrelic {
//    app-name = "knora-api"
//    license-key = "f4794f4107b755c3c94c1d271ecc246f74469830"
//}
