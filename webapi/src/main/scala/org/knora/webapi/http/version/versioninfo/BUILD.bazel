package(default_visibility = ["//visibility:public"])

# bring our version constants in
load("//third_party:versions.bzl", "SCALA_VERSION", "AKKA_VERSION", "AKKA_HTTP_VERSION", "SIPI_VERSION", "FUSEKI_VERSION")
load("@io_bazel_rules_scala//scala:scala.bzl", "scala_library")
load("@ecosia_rules_stamp//:defs.bzl", "stamp")

filegroup(
    name = "srcs",
    srcs = glob(["**"]),
)

# the stamp rule extracts the stamped values (from //tools/buildstamp)
# into a separate file (see 'bazel-out/darwin-fastbuild/bin/tools/version_info/STAMP_BUILD_SCM_TAG'),
# onto which other rules can then depend
stamp(
    name = "build_scm_tag_stamp",
    stamp_keys = ["BUILD_SCM_TAG"],
)

# Generates a scala source file that includes version information
# The generated intermediate file is missing the BUILD_TAG, which is
# added by the 'version_info_with_build_tag' genrule
load("//webapi/src/main/scala/org/knora/webapi/http/version/versioninfo:gen_version_info.bzl", "gen_version_info")
gen_version_info(
    name = "version_info_without_build_tag",
    scala_version = SCALA_VERSION,
    akka_version = AKKA_VERSION,
    akka_http_version = AKKA_HTTP_VERSION,
    sipi_version = SIPI_VERSION,
    fuseki_version = FUSEKI_VERSION,
)

# Adds the missing build tag and emits the final scala object
genrule(
    name = "version_info_with_build_tag",
    srcs = [
        ":build_scm_tag_stamp",
        ":version_info_without_build_tag"
    ],
    outs = ["version_info.scala"],
    tools = [":add_build_tag.sh"],
    cmd = '$(location add_build_tag.sh) $(location build_scm_tag_stamp) $(location version_info_without_build_tag) > "$@"',
)

scala_library(
    name = "versioninfo",
    srcs = [":version_info_with_build_tag"],
)
