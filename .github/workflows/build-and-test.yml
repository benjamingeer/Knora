name: CI-build-and-test

on:
  push:
    branches-ignore:
      - main
      - "release-*"

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - name: Run preparatory steps
        uses: dasch-swiss/dsp-api/.github/actions/preparation@main
      - name: Run all tests
        run: sbt -v coverage test coverageAggregate
      - name: WebApi Unit Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: WebApi Unit Test Results
          path: ./webapi/target/test-reports/TEST-*.xml
          reporter: java-junit
      - name: Upload coverage data to codacy
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./target/scala-2.13/coverage-report/cobertura.xml
      - name: Upload coverage data to codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./target/scala-2.13/coverage-report/cobertura.xml

  integration-test:
    name: Build and integration-test
    runs-on: actuated
    concurrency:
      group: ${{ github.ref }}-it
      cancel-in-progress: true
    steps:
      - name: Run preparatory steps
        uses: dasch-swiss/dsp-api/.github/actions/preparation@main
      - name: add packages
        run: |
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo -H gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --import
          sudo chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg
          sudo apt-get update
          sudo apt install -qyyy --no-install-recommends sbt
      - name: Run all integration tests
        run: make integration-test
      - name: WebApi Integration Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: WebApi Integration Test Results
          path: ./webapi/target/it-reports/TEST-*.xml
          reporter: java-junit
      - name: Upload coverage data to codacy
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./target/scala-2.13/coverage-report/cobertura.xml
      - name: Upload coverage data to codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./target/scala-2.13/coverage-report/cobertura.xml

  zio-http-test:
    name: Build and zio-http-test
    runs-on: ubuntu-latest
    steps:
      - name: Run preparatory steps
        uses: dasch-swiss/dsp-api/.github/actions/preparation@main
      - name: Run all ZioHttp tests
        run: make zio-http-test
      - name: ZIO-Http Routes Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: ZIO-Http Routes Test Report
          path: ./webapi/target/it-reports/TEST-*.xml
          reporter: java-junit
      - name: Upload coverage data to codacy
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./target/scala-2.13/coverage-report/cobertura.xml
      - name: Upload coverage data to codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./target/scala-2.13/coverage-report/cobertura.xml

  test-client-test-data:
    name: Test client-test-data
    runs-on: ubuntu-latest
    steps:
      - name: Run preparatory steps
        uses: dasch-swiss/dsp-api/.github/actions/preparation@main
      - name: Create client-test-data
        run: make client-test-data

  test-repository-upgrade:
    name: Test repository upgrade
    runs-on: ubuntu-latest
    steps:
      - name: Run preparatory steps
        uses: dasch-swiss/dsp-api/.github/actions/preparation@main
      - name: Test repository upgrade
        run: make test-repository-upgrade
      - name: Dump docker logs
        uses: jwalton/gh-docker-logs@v2

  test-docs-build:
    name: Test docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Install requirements (pip, npm, apt)
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          npm install --global typedoc
          sudo apt-get install graphviz
      - name: Build docs
        run: make docs-build

  check-formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Run preparatory steps
        uses: dasch-swiss/dsp-api/.github/actions/preparation@main
      - name: Check formatting
        run: make check
