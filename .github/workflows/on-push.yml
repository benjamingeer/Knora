name: Build and Test

on:
  schedule:
    # run every midnight (on main) so that the first compile of the day from main is cached
    - cron: "0 0 * * *"
  push:

jobs:
  build-and-test:
    name: Build, test all, and create client-test-data
    runs-on: ubuntu-latest
    steps:
      - name: Run preparatory steps
        uses: dasch-swiss/dsp-api/.github/actions@23afe175d58d7e1a56cc77684aa16240a6ecb05a
      - name: Run make test-and-create-client-test-data
        run: make test-and-create-client-test-data
      - name: Upload coverage data to codacy
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./target/scala-2.13/coverage-report/cobertura.xml
      - name: Upload coverage data to codecov 
        uses: codecov/codecov-action@v3
        with:
          files: ./target/scala-2.13/coverage-report/cobertura.xml
      - name: Cleanup before cache
        shell: bash
        run: |
          rm -rf "$HOME/.ivy2/local" || true
          find $HOME/Library/Caches/Coursier/v1        -name "ivydata-*.properties" -delete || true
          find $HOME/.ivy2/cache                       -name "ivydata-*.properties" -delete || true
          find $HOME/.cache/coursier/v1                -name "ivydata-*.properties" -delete || true
          find $HOME/.sbt                              -name "*.lock"               -delete || true

  test-docs-build:
    name: Test build of docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Add docker compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
      - name: Install requirements (pip, npm, apt)
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          npm install --global typedoc
          sudo apt-get install graphviz
      - name: Build docs
        run: make docs-build

  check-formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Run preparatory steps
        uses: dasch-swiss/dsp-api/.github/actions@23afe175d58d7e1a56cc77684aa16240a6ecb05a
      - name: Check formatting
        run: make check
      - name: Cleanup before cache
        shell: bash
        run: |
          rm -rf "$HOME/.ivy2/local" || true
          find $HOME/Library/Caches/Coursier/v1        -name "ivydata-*.properties" -delete || true
          find $HOME/.ivy2/cache                       -name "ivydata-*.properties" -delete || true
          find $HOME/.cache/coursier/v1                -name "ivydata-*.properties" -delete || true
          find $HOME/.sbt                              -name "*.lock"               -delete || true
