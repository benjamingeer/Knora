name: Publish-release

on:
  release:
    types: [published]

jobs:
  create-client-test-data:
    name: Create and upload client-test-data
    runs-on: actuated
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Run preparatory steps
        uses: dasch-swiss/dsp-api/.github/actions/preparation@main
      - name: add packages
        run: |
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo -H gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --import
          sudo chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg
          sudo apt-get update
          sudo apt install -qyyy --no-install-recommends sbt
      - name: Create client-test-data
        run: make client-test-data
      - name: Upload client-test-data
        uses: actions/upload-artifact@v3
        with:
          name: client-test-data-zip
          path: client-test-data.zip
          retention-days: 1

  publish-release:
    name: Publish release
    needs: [create-client-test-data]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Run preparatory steps
        uses: dasch-swiss/dsp-api/.github/actions/preparation@main
      - name: Install requirements (apt, pip, npm)
        run: |
          sudo apt-get install graphviz
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          npm install --global typedoc
      - name: Download client-test-data
        uses: actions/download-artifact@v3
        with:
          name: client-test-data-zip
      - name: Add client-test-data to release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: client-test-data.zip
          tag: ${{ github.ref }}
          overwrite: true
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and publish all images to Dockerhub
        run: |
          echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
          make docker-publish

  send-chat-notification:
    name: Send google chat notification
    needs: [publish-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Send notification to google chat room "DSP releases"
        uses: lakto/google-chat-action@main
        with:
          url: ${{ secrets.GOOGLE_CHAT_DSP_RELEASES_WEBHOOK_URL }}

