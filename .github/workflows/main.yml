name: CI

on:
  push:
  release:
    types: [published]

jobs:
  compile:
    name: Build Everything
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install dependencies
        run: |
          npm install --global @bazel/bazelisk
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: Run build everything
        run: make build
      - name: Disk Free After
        run: |
          df -h
          docker system df

# ------------------------------------------
# ------------------------------------------
# Test client-test-data 
  client-test-data-tests:
    name: Test client-test-data 
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 50
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: Install requirements
        run: sudo apt-get install ca-certificates-java expect redis-tools unzip
      - name: Generate api-client-test-data
        run: make client-test-data
      - name: Disk Free After
        run: |
          df -h
          docker system df
# ------------------------------------------
# ------------------------------------------

  api-unit-tests:
    name: API Unit Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 150
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install dependencies
        run: |
          npm install --global @bazel/bazelisk
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Print env file
        run: |
          make env-file
          make print-env-file
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: Run API unit tests
        run: make test-unit
      - name: Disk Free After
        run: |
          df -h
          docker system df

  api-e2e-tests:
    name: API E2E Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect redis-tools unzip
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          npm install --global typedoc
          npm install --global @bazel/bazelisk
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: print env file
        run: |
          make env-file
          make print-env-file
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: run API E2E tests
        run: make test-e2e
      - name: Disk Free After
        run: |
          df -h
          docker system df

  api-integration-tests:
    name: API Integration Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install dependencies
        run: |
          npm install --global @bazel/bazelisk
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: print env file
        run: |
          make env-file
          make print-env-file
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: run API integration tests
        run: |
          make test-docker
          make test-it
      - name: Disk Free After
        run: |
          df -h
          docker system df

  upgrade-integration-tests:
    name: Upgrade Integration Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install dependencies
        run: |
          npm install --global @bazel/bazelisk
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: install requirements
        run: sudo apt-get install expect
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: test repository upgrade
        run: make test-repository-upgrade
      - name: Disk Free After
        run: |
          df -h
          docker system df

  docs-build-test:
    name: Docs Build Test
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          npm install --global typedoc
          npm install --global @bazel/bazelisk
          sudo apt-get install graphviz
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: run docs build
        run: make docs-build
      - name: Disk Free After
        run: |
          df -h
          docker system df

  release-please:
    name: Prepare next release
    runs-on: ubuntu-latest
    # Automate releases with Conventional Commit Messages as Pull Requests are merged into "main" branch
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: GoogleCloudPlatform/release-please-action@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: simple
          package-name: dsp-api
          changelog-types: '[{"type": "feat", "section": "Enhancements", "hidden": false }, {"type": "fix", "section": "Bug Fixes", "hidden": false }, {"type": "chore", "section": "Maintenance", "hidden": false }, {"type": "refactor", "section": "Maintenance", "hidden": false }, {"type": "docs", "section": "Documentation", "hidden": false }]'

  # publish only on release
  publish:
    name: Publish (on release only)
    needs: [
      api-unit-tests,
      api-e2e-tests,
      api-integration-tests,
      client-test-data-tests,
      upgrade-integration-tests,
      docs-build-test
    ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 50
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: Install requirements
        run: sudo apt-get install ca-certificates-java expect redis-tools unzip
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          npm install --global typedoc
          npm install --global @bazel/bazelisk
          sudo apt-get install graphviz
      - name: Generate api-client-test-data
        run: make client-test-data
      - name: Add api-client-test-data to release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: client-test-data.zip
          tag: ${{ github.ref }}
          overwrite: true
      - name: Cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: Build and publish all images to Dockerhub
        run: |
          echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
          make docker-publish
      - name: Disk Free After
        run: |
          df -h
          docker system df

  # google chat notification about release
  notification:
    name: Google chat notification about release and published version
    needs: [publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Send notification to google chat room "DSP releases"
        uses: lakto/google-chat-action@main
        with:
          url: ${{ secrets.GOOGLE_CHAT_DSP_RELEASES_WEBHOOK_URL }}

  # deploy documentation only on release
  deploy-docs:
    name: Deploy docs (on release only)
    needs: [
      docs-build-test
    ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          npm install --global typedoc
          npm install --global @bazel/bazelisk
          sudo apt-get install graphviz
      - name: Deploy docs
        uses: mhausenblas/mkdocs-deploy-gh-pages@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CUSTOM_DOMAIN: docs-api.dasch.swiss
          REQUIREMENTS: docs/requirements.txt
      - name: Disk Free After
        run: |
          df -h
          docker system df
