name: CI

on: [push]

env:
  KNORA_GDB_LICENSE: ${{ github.workspace }}/ci/graphdb.license

jobs:
  compile:
    name: Dump all Contexts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: install requirements
        run: sudo apt-get install ca-certificates-java
      - name: install bazel
        run: |
          wget https://github.com/bazelbuild/bazel/releases/download/2.0.0/bazel_2.0.0-linux-x86_64.deb
          sudo dpkg -i bazel_2.0.0-linux-x86_64.deb
      - name: add buildcache
        run: |
          echo "$buildcache_authorization_key" > ${{ github.workspace }}/buildcache_authorization_key.json
          echo "build --remote_http_cache=https://buildcache.dasch.dev" >> ${{ github.workspace }}/.bazelrc
          echo "build --google_credentials=${{ github.workspace }}/buildcache_authorization_key.json" >> ${{ github.workspace }}/.bazelrc
        env:
          buildcache_authorization_key: ${{ secrets.buildcache_authorization_key }}
      - name: dump .bazelrc
        run: cat ${{ github.workspace }}/.bazelrc
      - name: run bazel build
        run: bazel build //...

  webapi-test:
    name: Webapi Test
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect
      - name: install bazel
        run: |
          wget https://github.com/bazelbuild/bazel/releases/download/2.0.0/bazel_2.0.0-linux-x86_64.deb
          sudo dpkg -i bazel_2.0.0-linux-x86_64.deb
      - name: add buildcache
        run: |
          echo "$buildcache_authorization_key" > ${{ github.workspace }}/buildcache_authorization_key.json
          echo "build --remote_http_cache=https://buildcache.dasch.dev" >> ${{ github.workspace }}/.bazelrc
          echo "build --google_credentials=${{ github.workspace }}/buildcache_authorization_key.json" >> ${{ github.workspace }}/.bazelrc
        env:
          buildcache_authorization_key: ${{ secrets.buildcache_authorization_key }}
      - name: prepare needed graphdb-se files
        run: |
          echo ${{ secrets.license_encryption_key }} | gpg --quiet --batch --yes --decrypt --passphrase-fd 0 --output $GITHUB_WORKSPACE/ci/secrets.tar $GITHUB_WORKSPACE/ci/secrets.tar.gpg
          tar -C ci -xvf ci/secrets.tar
          mkdir -p $GITHUB_WORKSPACE/graphdb
          cp $GITHUB_WORKSPACE/ci/graphdb.license $GITHUB_WORKSPACE/graphdb/graphdb.license
          cp $GITHUB_WORKSPACE/webapi/scripts/KnoraRules.pie $GITHUB_WORKSPACE/graphdb
      - name: Print env file
        run: make print-env-file
      - name: Run webapi tests
        run: make test-webapi

  upgrade-unit-test:
    name: Upgrade Unit Test
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect
      - name: install bazel
        run: |
          wget https://github.com/bazelbuild/bazel/releases/download/2.0.0/bazel_2.0.0-linux-x86_64.deb
          sudo dpkg -i bazel_2.0.0-linux-x86_64.deb
      - name: add buildcache
        run: |
          echo "$buildcache_authorization_key" > ${{ github.workspace }}/buildcache_authorization_key.json
          echo "build --remote_http_cache=https://buildcache.dasch.dev" >> ${{ github.workspace }}/.bazelrc
          echo "build --google_credentials=${{ github.workspace }}/buildcache_authorization_key.json" >> ${{ github.workspace }}/.bazelrc
        env:
          buildcache_authorization_key: ${{ secrets.buildcache_authorization_key }}
      - name: prepare needed graphdb-se files
        run: |
          echo ${{ secrets.license_encryption_key }} | gpg --quiet --batch --yes --decrypt --passphrase-fd 0 --output $GITHUB_WORKSPACE/ci/secrets.tar $GITHUB_WORKSPACE/ci/secrets.tar.gpg
          tar -C ci -xvf ci/secrets.tar
          mkdir -p $GITHUB_WORKSPACE/graphdb
          cp $GITHUB_WORKSPACE/ci/graphdb.license $GITHUB_WORKSPACE/graphdb/graphdb.license
          cp $GITHUB_WORKSPACE/webapi/scripts/KnoraRules.pie $GITHUB_WORKSPACE/graphdb
      - name: Print env file
        run: make print-env-file
      - name: Run upgrade tests
        run: make test-upgrade

  upgrade-integration-test:
    name: Upgrade Integration Test
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect
      - name: install bazel
        run: |
          wget https://github.com/bazelbuild/bazel/releases/download/2.0.0/bazel_2.0.0-linux-x86_64.deb
          sudo dpkg -i bazel_2.0.0-linux-x86_64.deb
      - name: add buildcache
        run: |
          echo "$buildcache_authorization_key" > ${{ github.workspace }}/buildcache_authorization_key.json
          echo "build --remote_http_cache=https://buildcache.dasch.dev" >> ${{ github.workspace }}/.bazelrc
          echo "build --google_credentials=${{ github.workspace }}/buildcache_authorization_key.json" >> ${{ github.workspace }}/.bazelrc
        env:
          buildcache_authorization_key: ${{ secrets.buildcache_authorization_key }}
      - name: prepare needed graphdb-se files
        run: |
          echo ${{ secrets.license_encryption_key }} | gpg --quiet --batch --yes --decrypt --passphrase-fd 0 --output $GITHUB_WORKSPACE/ci/secrets.tar $GITHUB_WORKSPACE/ci/secrets.tar.gpg
          tar -C ci -xvf ci/secrets.tar
          mkdir -p $GITHUB_WORKSPACE/graphdb
          cp $GITHUB_WORKSPACE/ci/graphdb.license $GITHUB_WORKSPACE/graphdb/graphdb.license
          cp $GITHUB_WORKSPACE/webapi/scripts/KnoraRules.pie $GITHUB_WORKSPACE/graphdb
      - name: Print env file
        run: make print-env-file
      - name: Run upgrade integration test
        run: make test-upgrade-integration

  salsah1-test:
    name: Salsah1 Test
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect
      - name: install bazel
        run: |
          wget https://github.com/bazelbuild/bazel/releases/download/2.0.0/bazel_2.0.0-linux-x86_64.deb
          sudo dpkg -i bazel_2.0.0-linux-x86_64.deb
      - name: add buildcache
        run: |
          echo "$buildcache_authorization_key" > ${{ github.workspace }}/buildcache_authorization_key.json
          echo "build --remote_http_cache=https://buildcache.dasch.dev" >> ${{ github.workspace }}/.bazelrc
          echo "build --google_credentials=${{ github.workspace }}/buildcache_authorization_key.json" >> ${{ github.workspace }}/.bazelrc
        env:
          buildcache_authorization_key: ${{ secrets.buildcache_authorization_key }}
      - name: prepare needed graphdb-se files
        run: |
          echo ${{ secrets.license_encryption_key }} | gpg --quiet --batch --yes --decrypt --passphrase-fd 0 --output $GITHUB_WORKSPACE/ci/secrets.tar $GITHUB_WORKSPACE/ci/secrets.tar.gpg
          tar -C ci -xvf ci/secrets.tar
          mkdir -p $GITHUB_WORKSPACE/graphdb
          cp $GITHUB_WORKSPACE/ci/graphdb.license $GITHUB_WORKSPACE/graphdb/graphdb.license
          cp $GITHUB_WORKSPACE/webapi/scripts/KnoraRules.pie $GITHUB_WORKSPACE/graphdb
      - name: Print env file
        run: make print-env-file
      - name: Run webapi tests
        run: make test-salsah1

  docs-build-test:
    name: Docs Build Test
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: run docs build test
        run: |
          mkdir -p $GITHUB_WORKSPACE/docs/target
          chmod 777 $GITHUB_WORKSPACE/docs/target
          make docs-build

  # publish only for develop and tags
  publish:
    name: Publish to Dockerhub
    needs: [webapi-test, upgrade-unit-test, upgrade-integration-test, salsah1-test, docs-build-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 50
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: build and publish all images to Dockerhub
        run: |
          echo $DOCKER_HUB_TOKEN | docker login -u $DOCKER_USER --password-stdin
          make docker-publish
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
