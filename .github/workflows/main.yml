name: CI

on: [push]

env:
  KNORA_GDB_LICENSE: ${{ github.workspace }}/ci/graphdb/UNIBAS_DEV_GRAPHDB_SE_latest-31-12-2020_1cores.license

jobs:
  compile:
    name: Build Everything
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: Run build everything
        run: sbt clean test:compile it:compile stage
      - name: Disk Free After
        run: |
          df -h
          docker system df

  api-unit-tests:
    name: API Unit Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Checkout private ci-assets
        uses: actions/checkout@v2
        with:
          repository: dasch-swiss/dsp-ci-assets
          token: ${{ secrets.GitHub_PAT }} # `GitHub_PAT` is a secret that contains the PAT.
          path: ci
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Print env file
        run: |
          make env-file
          make print-env-file
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: Run API unit tests
        run: make test-unit-ci
      - name: Disk Free After
        run: |
          df -h
          docker system df

  api-e2e-tests:
    name: API E2E Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Checkout private ci-assets
        uses: actions/checkout@v2
        with:
          repository: dasch-swiss/dsp-ci-assets
          token: ${{ secrets.GitHub_PAT }} # `GitHub_PAT` is a secret that contains the PAT.
          path: ci
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: print env file
        run: |
          make env-file
          make print-env-file
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: run API E2E tests
        run: make test-e2e-ci
      - name: Disk Free After
        run: |
          df -h
          docker system df

  api-integration-tests:
    name: API Integration Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Checkout private ci-assets
        uses: actions/checkout@v2
        with:
          repository: dasch-swiss/dsp-ci-assets
          token: ${{ secrets.GitHub_PAT }} # `GitHub_PAT` is a secret that contains the PAT.
          path: ci
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: print env file
        run: |
          make env-file
          make print-env-file
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: run API integration tests
        run: make test-it-ci
      - name: Disk Free After
        run: |
          df -h
          docker system df

  js-lib-tests:
    name: JS Lib Tests
    needs: compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Checkout private ci-assets
        uses: actions/checkout@v2
        with:
          repository: dasch-swiss/dsp-ci-assets
          token: ${{ secrets.GitHub_PAT }} # `GitHub_PAT` is a secret that contains the PAT.
          path: ci
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: install requirements
        run: sudo apt-get install expect
      - name: print env file
        run: |
          make env-file
          make print-env-file
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: setup required node version
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: run JS lib tests
        run: make test-js-lib-integration
      - name: Disk Free After
        run: |
          df -h
          docker system df

  upgrade-unit-tests:
    name: Upgrade Unit Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: run upgrade tests
        run: sbt "upgrade/test"
      - name: Disk Free After
        run: |
          df -h
          docker system df

  upgrade-integration-tests:
    name: Upgrade Integration Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Checkout private ci-assets
        uses: actions/checkout@v2
        with:
          repository: dasch-swiss/dsp-ci-assets
          token: ${{ secrets.GitHub_PAT }} # `GitHub_PAT` is a secret that contains the PAT.
          path: ci
      - uses: actions/setup-java@v1
        with:
          java-version: '11.x.x'
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: install requirements
        run: sudo apt-get install expect
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: build all docker images
        run: |
          make build-all-scala
          make build-all-images
      - name: start and initialize graphdb-se
        run: |
          docker network create knora-net
          docker run --rm -d --name=db --network=knora-net -p 127.0.0.1:7200:7200 -e GDB_HEAP_SIZE=$GDB_HEAP_SIZE daschswiss/knora-graphdb-se -Dgraphdb.license.file=/graphdb/graphdb.license
          sleep 5
          make init-db-test-minimal
      - name: unzip test data
        run: unzip $GITHUB_WORKSPACE/test-data/v7.0.0/v7.0.0-knora-test.trig.zip -d $GITHUB_WORKSPACE/test-data/v7.0.0/
      - name: empty repository
        run: $GITHUB_WORKSPACE/upgrade/graphdb-se/empty-repository.sh -r knora-test -u gaga -p gaga -h localhost:7200
      - name: load v7.0.0 data
        run: $GITHUB_WORKSPACE/upgrade/graphdb-se/upload-repository.sh -r knora-test -u gaga -p gaga -h localhost:7200 $GITHUB_WORKSPACE/test-data/v7.0.0/v7.0.0-knora-test.trig
      - name: dump repository data
        run: |
          mkdir -p $GITHUB_WORKSPACE/upgrade/out
          $GITHUB_WORKSPACE/upgrade/graphdb-se/dump-repository.sh -r knora-test -u gaga -p gaga -h localhost:7200 $GITHUB_WORKSPACE/upgrade/out/dump.trig
      - name: run upgrade from inside docker
        run: docker run --rm --network=knora-net -v $GITHUB_WORKSPACE/upgrade/out:/upgrade/out daschswiss/knora-upgrade /upgrade/out/dump.trig /upgrade/out/dump-upgraded.trig
      - name: empty repository
        run: $GITHUB_WORKSPACE/upgrade/graphdb-se/empty-repository.sh -r knora-test -u gaga -p gaga -h localhost:7200
      - name: load upgraded data
        run: $GITHUB_WORKSPACE/upgrade/graphdb-se/upload-repository.sh -r knora-test -u gaga -p gaga -h localhost:7200 $GITHUB_WORKSPACE/upgraded/out/dump-upgraded.trig
      - name: Disk Free After
        run: |
          df -h
          docker system df

  docs-build-test:
    name: Docs Build Test
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: run docs build test
        run: |
          mkdir -p $GITHUB_WORKSPACE/docs/target
          chmod 777 $GITHUB_WORKSPACE/docs/target
          make docs-build
      - name: Disk Free After
        run: |
          df -h
          docker system df

  # publish only for develop and tags
  publish:
    name: Publish to Dockerhub
    needs: [api-unit-tests, api-e2e-tests, api-integration-tests, upgrade-unit-tests, upgrade-integration-tests, docs-build-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 50
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: build and publish all images to Dockerhub
        run: |
          echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
          mkdir -p $( dirname "$KNORA_GDB_LICENSE") && touch "$KNORA_GDB_LICENSE"
          make publish-all-images
      - name: Disk Free After
        run: |
          df -h
          docker system df
