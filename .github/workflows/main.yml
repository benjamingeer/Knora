name: CI

on:
  schedule:
    # run every midnight (on main) so that the first compile of the day from main is cached
    - cron: '0 0 * * *'
  push:
  release:
    types: [published]

jobs:
  compile:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 15
      - name: get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DD
          utcOffset: "+02:00"
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: add docker compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect
      - name: Coursier cache
        uses: coursier/cache-action@v6
      - name: Build and Test
        run: make test
      - name: Cleanup before cache
        shell: bash
        run: |
          rm -rf "$HOME/.ivy2/local" || true
          find $HOME/Library/Caches/Coursier/v1        -name "ivydata-*.properties" -delete || true
          find $HOME/.ivy2/cache                       -name "ivydata-*.properties" -delete || true
          find $HOME/.cache/coursier/v1                -name "ivydata-*.properties" -delete || true
          find $HOME/.sbt                              -name "*.lock"               -delete || true

# ------------------------------------------
# ------------------------------------------
  client-test-data-tests:
    name: Run client-test-data
    runs-on: ubuntu-latest
    steps:
      - name: checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 15
      - name: get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DD
          utcOffset: "+02:00"
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: add docker compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect unzip
      - name: Coursier cache
        uses: coursier/cache-action@v6
      - name: generate api-client-test-data
        run: make client-test-data
      - name: upload client-test-data
        uses: actions/upload-artifact@v3
        with:
          name: client-test-data-zip
          path: client-test-data.zip
          retention-days: 1
      - name: cleanup before cache
        shell: bash
        run: |
          rm -rf "$HOME/.ivy2/local" || true
          find $HOME/Library/Caches/Coursier/v1        -name "ivydata-*.properties" -delete || true
          find $HOME/.ivy2/cache                       -name "ivydata-*.properties" -delete || true
          find $HOME/.cache/coursier/v1                -name "ivydata-*.properties" -delete || true
          find $HOME/.sbt                              -name "*.lock"               -delete || true

# ------------------------------------------
# ------------------------------------------
  upgrade-integration-tests:
    name: Upgrade Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 15
      - name: get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DD
          utcOffset: "+02:00"
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: add docker compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
      - name: install dependencies
        run: |
          sudo apt-get install ca-certificates-java expect
      - name: Coursier cache
        uses: coursier/cache-action@v6
      - name: test repository upgrade
        run: make test-repository-upgrade
      - name: dump docker logs on failure using different shell
        # if: failure()
        uses: jwalton/gh-docker-logs@v1
        with:
          shell: '/bin/sh'
      - name: cleanup before cache
        shell: bash
        run: |
          rm -rf "$HOME/.ivy2/local" || true
          find $HOME/Library/Caches/Coursier/v1        -name "ivydata-*.properties" -delete || true
          find $HOME/.ivy2/cache                       -name "ivydata-*.properties" -delete || true
          find $HOME/.cache/coursier/v1                -name "ivydata-*.properties" -delete || true
          find $HOME/.sbt                              -name "*.lock"               -delete || true

  docs-build-test:
    name: Build Docs Testrun
    runs-on: ubuntu-latest
    steps:
      - name: checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: add docker compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          npm install --global typedoc
          sudo apt-get install graphviz
      - name: run docs build
        run: make docs-build

  release-please:
    name: Prepare next release
    runs-on: ubuntu-latest
    # Automate releases with Conventional Commit Messages as Pull Requests are merged into "main" branch
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: GoogleCloudPlatform/release-please-action@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: simple
          package-name: dsp-api
          changelog-types: '[
            {"type": "feat", "section": "Enhancements", "hidden": false },
            {"type": "fix", "section": "Bug Fixes", "hidden": false },
            {"type": "build", "section": "Maintenance", "hidden": false },
            {"type": "chore", "section": "Maintenance", "hidden": false },
            {"type": "refactor", "section": "Maintenance", "hidden": false },
            {"type": "docs", "section": "Documentation", "hidden": false }
            ]'

  # publish only on release
  publish:
    name: Publish (on release only)
    needs: [
      compile,
      client-test-data-tests,
      upgrade-integration-tests,
      docs-build-test
    ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 50
      - name: get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DD
          utcOffset: "+02:00"
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: add docker compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect unzip
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          npm install --global typedoc
          sudo apt-get install graphviz
      - name: download client-test-data
        uses: actions/download-artifact@v3
        with:
          name: client-test-data-zip
      - name: add api-client-test-data to release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: client-test-data.zip
          tag: ${{ github.ref }}
          overwrite: true
      - name: build and publish all images to Dockerhub
        run: |
          echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
          make docker-publish

  # google chat notification about release
  notification:
    name: Google chat notification about release and published version
    needs: [publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: send notification to google chat room "DSP releases"
        uses: lakto/google-chat-action@main
        with:
          url: ${{ secrets.GOOGLE_CHAT_DSP_RELEASES_WEBHOOK_URL }}

  # deploy documentation only on release
  deploy-docs:
    name: Deploy docs (on release only)
    needs: [
      docs-build-test
    ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: add docker compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          npm install --global typedoc
          sudo apt-get install graphviz
      - name: deploy docs
        uses: mhausenblas/mkdocs-deploy-gh-pages@1.16
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CUSTOM_DOMAIN: docs-api.dasch.swiss
          REQUIREMENTS: docs/requirements.txt
    
  fmtcheck:
    name: Check Formating
    runs-on: ubuntu-latest
    steps:
      - name: checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 15
      - name: get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DD
          utcOffset: "+02:00"
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: add docker compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect
      - name: Coursier cache
        uses: coursier/cache-action@v6
      - name: Run fmtcheck
        run: make check
      - name: Cleanup before cache
        shell: bash
        run: |
          rm -rf "$HOME/.ivy2/local" || true
          find $HOME/Library/Caches/Coursier/v1        -name "ivydata-*.properties" -delete || true
          find $HOME/.ivy2/cache                       -name "ivydata-*.properties" -delete || true
          find $HOME/.cache/coursier/v1                -name "ivydata-*.properties" -delete || true
          find $HOME/.sbt                              -name "*.lock"               -delete || true
