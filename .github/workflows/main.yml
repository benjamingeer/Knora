name: CI

on:
  push:
  release:
    types: [published]

jobs:
  compile:
    name: Build Everything
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: Run build everything
        run: make build-all-scala
      - name: Disk Free After
        run: |
          df -h
          docker system df

  api-unit-tests:
    name: API Unit Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Print env file
        run: |
          make env-file
          make print-env-file
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: Run API unit tests
        run: make test-unit-ci
      - name: Disk Free After
        run: |
          df -h
          docker system df

  api-e2e-tests:
    name: API E2E Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: print env file
        run: |
          make env-file
          make print-env-file
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: run API E2E tests
        run: make test-e2e-ci
      - name: Disk Free After
        run: |
          df -h
          docker system df

  api-integration-tests:
    name: API Integration Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: print env file
        run: |
          make env-file
          make print-env-file
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: run API integration tests
        run: make test-it-ci
      - name: Disk Free After
        run: |
          df -h
          docker system df

  upgrade-integration-tests:
    name: Upgrade Integration Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - uses: actions/setup-java@v1
        with:
          java-version: '11.x.x'
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: install requirements
        run: sudo apt-get install expect
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: test repository update
        run: make test-repository-update
      - name: Disk Free After
        run: |
          df -h
          docker system df

  docs-build-test:
    name: Docs Build Test
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: run docs build test
        run: |
          mkdir -p $GITHUB_WORKSPACE/docs/target
          chmod 777 $GITHUB_WORKSPACE/docs/target
          make docs-build
      - name: Disk Free After
        run: |
          df -h
          docker system df

  # publish only on release
  publish:
    name: Publish to Dockerhub (on release only)
    needs: [
      api-unit-tests,
      api-e2e-tests,
      api-integration-tests,
      upgrade-integration-tests,
      docs-build-test
    ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 50
      - uses: joschi/setup-jdk@v2
        with:
          java-version: '11' # The OpenJDK version to make available on the path
          architecture: 'x64' # defaults to 'x64'
      - name: cache maven artifacts
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.OS }}-build-${{ hashFiles('**/KnoraBuild.sbt') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: build and publish all images to Dockerhub
        run: |
          echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
          make publish-all-images
      - name: Disk Free After
        run: |
          df -h
          docker system df
      - name: Generate Github release notes
        uses: lakto/gren-action@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
